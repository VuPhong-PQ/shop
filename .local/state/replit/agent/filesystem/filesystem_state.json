{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Hệ Thống POS Web Bán Hàng\n\n## Tổng Quan Dự Án\nHệ thống POS web toàn diện với tích hợp hóa đơn điện tử, được xây dựng bằng React và Express.js. Hệ thống hỗ trợ quản lý bán hàng, kho, khách hàng, nhân viên và các tính năng nâng cao khác.\n\n## Các Tính Năng Chính\n- ✅ Quản lý sản phẩm và kho\n- ✅ Giỏ hàng và xử lý đơn hàng  \n- ✅ Thanh toán đa dạng (tiền mặt, thẻ, QR, ví điện tử)\n- ✅ Quản lý khách hàng & CRM\n- ✅ Báo cáo doanh thu & phân tích\n- ✅ Tích hợp hóa đơn điện tử\n- ✅ Quản lý nhân viên/phân quyền\n- ✅ Chương trình khuyến mãi, voucher\n- ✅ Quản lý vận chuyển\n- ✅ Tích hợp đa nền tảng\n- ✅ Bảo mật & phân quyền\n- ✅ Đa chi nhánh/chuỗi\n- ✅ Quản lý đơn hàng online/offline\n\n## Kiến Trúc Dự Án\n- **Frontend**: React với Vite, TypeScript, Tailwind CSS, Shadcn/UI\n- **Backend**: Express.js với TypeScript\n- **Database**: PostgreSQL với Drizzle ORM\n- **State Management**: TanStack Query\n- **Routing**: Wouter\n- **Forms**: React Hook Form với Zod validation\n\n## Cấu Trúc Thư Mục\n```\n├── client/src/\n│   ├── components/ui/     # Shadcn UI components\n│   ├── pages/            # Các trang chính\n│   ├── lib/              # Utilities và configs\n│   └── hooks/            # Custom hooks\n├── server/\n│   ├── routes.ts         # API routes\n│   └── storage.ts        # Data storage interface\n├── shared/\n│   └── schema.ts         # Database schema và types\n└── package.json\n```\n\n## Người Dùng Ưu Tiên\n- Ngôn ngữ: Tiếng Việt\n- Giao diện: Đơn giản, dễ sử dụng\n- Tối ưu cho: Cửa hàng nhỏ đến trung bình tại Việt Nam\n\n## Thay Đổi Gần Đây\n- [26/08/2025] Khởi tạo dự án với full-stack JavaScript setup\n- [26/08/2025] Định nghĩa schema database cho POS system\n- [26/08/2025] Hoàn thiện trang Sales với POS đầy đủ chức năng\n- [26/08/2025] Xây dựng trang Products với quản lý CRUD hoàn chỉnh\n- [26/08/2025] Phát triển trang Customers với hệ thống CRM\n- [26/08/2025] Triển khai trang Inventory với quản lý kho toàn diện\n- [26/08/2025] Hoàn thiện Dashboard với báo cáo và thống kê real-time","size_bytes":2381},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // POS System Colors\n        success: \"var(--success)\",\n        warning: \"var(--warning)\",\n        error: \"var(--error)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        roboto: ['Roboto', 'sans-serif'],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2938},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { insertOrderSchema, insertCustomerSchema, insertProductSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n\n  // WebSocket for real-time updates\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  const clients = new Set<WebSocket>();\n  \n  wss.on('connection', (ws) => {\n    clients.add(ws);\n    console.log('Client connected to WebSocket');\n    \n    ws.on('close', () => {\n      clients.delete(ws);\n      console.log('Client disconnected from WebSocket');\n    });\n  });\n\n  // Broadcast function for real-time updates\n  const broadcast = (data: any) => {\n    clients.forEach((client) => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(JSON.stringify(data));\n      }\n    });\n  };\n\n  // Dashboard Analytics\n  app.get(\"/api/dashboard/metrics\", async (req, res) => {\n    try {\n      const storeId = req.headers['x-store-id'] as string || '';\n      const metrics = await storage.getDashboardMetrics(storeId);\n      res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch dashboard metrics\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/revenue-chart\", async (req, res) => {\n    try {\n      const storeId = req.headers['x-store-id'] as string || '';\n      const days = parseInt(req.query.days as string) || 7;\n      const data = await storage.getRevenueChartData(storeId, days);\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch revenue chart data\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/top-products\", async (req, res) => {\n    try {\n      const storeId = req.headers['x-store-id'] as string || '';\n      const limit = parseInt(req.query.limit as string) || 5;\n      const products = await storage.getTopProducts(storeId, limit);\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch top products\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/recent-orders\", async (req, res) => {\n    try {\n      const storeId = req.headers['x-store-id'] as string || '';\n      const limit = parseInt(req.query.limit as string) || 10;\n      const orders = await storage.getRecentOrders(storeId, limit);\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch recent orders\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/low-stock\", async (req, res) => {\n    try {\n      const storeId = req.headers['x-store-id'] as string || '';\n      const products = await storage.getLowStockProducts(storeId);\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch low stock products\" });\n    }\n  });\n\n  // Reports APIs\n  app.get(\"/api/reports/sales-summary\", async (req, res) => {\n    try {\n      const storeId = req.headers['x-store-id'] as string || '';\n      const { startDate, endDate } = req.query;\n      const summary = await storage.getSalesSummary(storeId, startDate as string, endDate as string);\n      res.json(summary);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch sales summary\" });\n    }\n  });\n\n  app.get(\"/api/reports/product-performance\", async (req, res) => {\n    try {\n      const storeId = req.headers['x-store-id'] as string || '';\n      const { startDate, endDate } = req.query;\n      const performance = await storage.getProductPerformance(storeId, startDate as string, endDate as string);\n      res.json(performance);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch product performance\" });\n    }\n  });\n\n  app.get(\"/api/reports/customer-analytics\", async (req, res) => {\n    try {\n      const storeId = req.headers['x-store-id'] as string || '';\n      const { startDate, endDate } = req.query;\n      const analytics = await storage.getCustomerAnalytics(storeId, startDate as string, endDate as string);\n      res.json(analytics);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch customer analytics\" });\n    }\n  });\n\n  app.get(\"/api/reports/profit-analysis\", async (req, res) => {\n    try {\n      const storeId = req.headers['x-store-id'] as string || '';\n      const { startDate, endDate } = req.query;\n      const analysis = await storage.getProfitAnalysis(storeId, startDate as string, endDate as string);\n      res.json(analysis);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch profit analysis\" });\n    }\n  });\n\n  // Products\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const storeId = req.headers['x-store-id'] as string || '';\n      const products = await storage.getProducts(storeId);\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch products\" });\n    }\n  });\n\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(productData);\n      broadcast({ type: 'product_created', data: product });\n      res.json(product);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid product data\", details: error.errors });\n      } else {\n        res.status(500).json({ error: \"Failed to create product\" });\n      }\n    }\n  });\n\n  app.put(\"/api/products/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const product = await storage.updateProduct(id, updates);\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      broadcast({ type: 'product_updated', data: product });\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteProduct(id);\n      broadcast({ type: 'product_deleted', data: { id } });\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete product\" });\n    }\n  });\n\n  // Customers\n  app.get(\"/api/customers\", async (req, res) => {\n    try {\n      const storeId = req.headers['x-store-id'] as string || '';\n      const customers = await storage.getCustomers(storeId);\n      res.json(customers);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch customers\" });\n    }\n  });\n\n  app.post(\"/api/customers\", async (req, res) => {\n    try {\n      const customerData = insertCustomerSchema.parse(req.body);\n      const customer = await storage.createCustomer(customerData);\n      broadcast({ type: 'customer_created', data: customer });\n      res.json(customer);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid customer data\", details: error.errors });\n      } else {\n        res.status(500).json({ error: \"Failed to create customer\" });\n      }\n    }\n  });\n\n  // Orders\n  app.get(\"/api/orders\", async (req, res) => {\n    try {\n      const storeId = req.headers['x-store-id'] as string || '';\n      const orders = await storage.getOrders(storeId);\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.post(\"/api/orders\", async (req, res) => {\n    try {\n      const orderData = insertOrderSchema.parse(req.body);\n      const order = await storage.createOrder(orderData, req.body.items);\n      broadcast({ type: 'order_created', data: order });\n      broadcast({ type: 'metrics_updated' }); // Trigger dashboard refresh\n      res.json(order);\n    } catch (error) {\n      console.error(\"Order creation error:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid order data\", details: error.errors });\n      } else {\n        res.status(500).json({ error: \"Failed to create order\", details: (error as Error).message });\n      }\n    }\n  });\n\n  // Categories\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const storeId = req.headers['x-store-id'] as string || '';\n      const categories = await storage.getCategories(storeId);\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch categories\" });\n    }\n  });\n\n  // Inventory\n  app.get(\"/api/inventory/movements\", async (req, res) => {\n    try {\n      const storeId = req.headers['x-store-id'] as string || '';\n      const movements = await storage.getInventoryMovements(storeId);\n      res.json(movements);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch inventory movements\" });\n    }\n  });\n\n  app.post(\"/api/inventory/adjust\", async (req, res) => {\n    try {\n      const { productId, quantity, reason, userId, storeId } = req.body;\n      const movement = await storage.adjustInventory(productId, quantity, reason, userId, storeId);\n      broadcast({ type: 'inventory_updated', data: movement });\n      res.json(movement);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to adjust inventory\" });\n    }\n  });\n\n  // Reports\n  app.get(\"/api/reports/sales\", async (req, res) => {\n    try {\n      const storeId = req.headers['x-store-id'] as string || '';\n      const { startDate, endDate } = req.query;\n      const report = await storage.getSalesReport(storeId, startDate as string, endDate as string);\n      res.json(report);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to generate sales report\" });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":9796},"server/storage.ts":{"content":"import { \n  users, products, customers, orders, orderItems, categories, \n  inventoryMovements, promotions, stores,\n  type User, type InsertUser, type Product, type InsertProduct,\n  type Customer, type InsertCustomer, type Order, type InsertOrder,\n  type OrderItem, type InsertOrderItem, type Category,\n  type InventoryMovement, type InsertInventoryMovement\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, sql, and, lte, gte } from \"drizzle-orm\";\n\n// Storage interface\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(insertUser: InsertUser): Promise<User>;\n  \n  // Dashboard\n  getDashboardMetrics(storeId: string): Promise<any>;\n  getRevenueChartData(storeId: string, days: number): Promise<any[]>;\n  getTopProducts(storeId: string, limit: number): Promise<any[]>;\n  getRecentOrders(storeId: string, limit: number): Promise<any[]>;\n  getLowStockProducts(storeId: string): Promise<any[]>;\n  \n  // Products\n  getProducts(storeId: string): Promise<Product[]>;\n  createProduct(insertProduct: InsertProduct): Promise<Product>;\n  updateProduct(id: string, updates: Partial<Product>): Promise<Product | undefined>;\n  deleteProduct(id: string): Promise<void>;\n  \n  // Customers\n  getCustomers(storeId: string): Promise<Customer[]>;\n  createCustomer(insertCustomer: InsertCustomer): Promise<Customer>;\n  \n  // Orders\n  getOrders(storeId: string): Promise<Order[]>;\n  createOrder(insertOrder: InsertOrder, items: InsertOrderItem[]): Promise<Order>;\n  \n  // Categories\n  getCategories(storeId: string): Promise<Category[]>;\n  \n  // Inventory\n  getInventoryMovements(storeId: string): Promise<InventoryMovement[]>;\n  adjustInventory(productId: string, quantity: number, reason: string, userId: string, storeId: string): Promise<InventoryMovement>;\n  \n  // Reports\n  getSalesReport(storeId: string, startDate: string, endDate: string): Promise<any>;\n}\n\nexport class MemStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n  \n  // Dashboard methods\n  async getDashboardMetrics(storeId: string): Promise<any> {\n    // Mock data for now - in real implementation would query database\n    const lowStockProducts = await this.getLowStockProducts(storeId);\n    \n    return {\n      todayRevenue: \"15.750.000₫\",\n      todayGrowth: \"+12.5%\",\n      monthRevenue: \"480.250.000₫\",\n      monthGrowth: \"+8.3%\",\n      ordersCount: 2847,\n      ordersGrowth: \"+15.2%\",\n      newCustomers: 1234,\n      customersGrowth: \"+5.7%\",\n      lowStockItems: lowStockProducts.length\n    };\n  }\n\n  async getRevenueChartData(storeId: string, days: number): Promise<any[]> {\n    // Mock revenue chart data\n    const data = [];\n    for (let i = days - 1; i >= 0; i--) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      data.push({\n        date: date.toISOString().split('T')[0],\n        revenue: Math.floor(Math.random() * 5000000) + 1000000,\n        orders: Math.floor(Math.random() * 50) + 10\n      });\n    }\n    return data;\n  }\n\n  async getTopProducts(storeId: string, limit: number): Promise<any[]> {\n    // Mock top products data\n    return [\n      { name: \"iPhone 15 Pro\", sales: 45, revenue: \"900.000.000₫\" },\n      { name: \"MacBook Air M2\", sales: 23, revenue: \"690.000.000₫\" },\n      { name: \"AirPods Pro\", sales: 67, revenue: \"402.000.000₫\" },\n      { name: \"iPad Air\", sales: 34, revenue: \"340.000.000₫\" },\n      { name: \"Apple Watch\", sales: 28, revenue: \"280.000.000₫\" }\n    ].slice(0, limit);\n  }\n\n  async getRecentOrders(storeId: string, limit: number): Promise<any[]> {\n    // Mock recent orders data\n    return [\n      {\n        id: \"1\",\n        orderNumber: \"ORD-001\",\n        customer: \"Nguyễn Văn An\",\n        total: \"15.000.000₫\",\n        status: \"completed\",\n        createdAt: new Date()\n      },\n      {\n        id: \"2\", \n        orderNumber: \"ORD-002\",\n        customer: \"Trần Thị Bình\",\n        total: \"8.500.000₫\",\n        status: \"processing\",\n        createdAt: new Date(Date.now() - 3600000)\n      }\n    ].slice(0, limit);\n  }\n\n  async getLowStockProducts(storeId: string): Promise<any[]> {\n    // Mock low stock products\n    return [\n      { id: \"1\", name: \"iPhone 15 Pro\", current: 3, minimum: 5, status: \"low\" },\n      { id: \"2\", name: \"AirPods Pro\", current: 1, minimum: 10, status: \"critical\" }\n    ];\n  }\n\n  // Products\n  async getProducts(storeId: string): Promise<Product[]> {\n    // Mock products for demo\n    return [\n        {\n          id: \"550e8400-e29b-41d4-a716-446655440010\",\n          name: \"iPhone 15 Pro\",\n          description: \"Smartphone cao cấp với chip A17 Pro\",\n          sku: \"IP15P-128GB\",\n          barcode: \"123456789\",\n          price: \"25000000\",\n          costPrice: \"22000000\", \n          image: \"https://images.unsplash.com/photo-1592750475338-74b7b21085ab?w=200&h=200&fit=crop\",\n          categoryId: \"550e8400-e29b-41d4-a716-446655440003\",\n          storeId: storeId,\n          isActive: true,\n          stockQuantity: 15,\n          minStockLevel: 10,\n          unit: \"chiếc\",\n          createdAt: new Date(),\n          updatedAt: new Date()\n        },\n        {\n          id: \"550e8400-e29b-41d4-a716-446655440011\",\n          name: \"AirPods Pro 2\",\n          description: \"Tai nghe không dây chống ồn\",\n          sku: \"APP2-WHITE\",\n          barcode: \"987654321\",\n          price: \"6000000\",\n          costPrice: \"5200000\",\n          image: \"https://images.unsplash.com/photo-1606220945770-b5b6c2c55bf1?w=200&h=200&fit=crop\",\n          categoryId: \"550e8400-e29b-41d4-a716-446655440005\",\n          storeId: storeId,\n          isActive: true,\n          stockQuantity: 25,\n          minStockLevel: 15,\n          unit: \"cặp\",\n          createdAt: new Date(),\n          updatedAt: new Date()\n        },\n        {\n          id: \"550e8400-e29b-41d4-a716-446655440013\",\n          name: \"iPad Air 11\\\"\",\n          description: \"Máy tính bảng với chip M2\",\n          sku: \"IPA11-256GB\",\n          barcode: \"135792468\",\n          price: \"15000000\",\n          costPrice: \"13000000\",\n          image: \"https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?w=200&h=200&fit=crop\",\n          categoryId: \"550e8400-e29b-41d4-a716-446655440003\",\n          storeId: storeId,\n          isActive: true,\n          stockQuantity: 3,\n          minStockLevel: 5,\n          unit: \"chiếc\",\n          createdAt: new Date(),\n          updatedAt: new Date()\n        },\n        {\n          id: \"550e8400-e29b-41d4-a716-446655440012\",\n          name: \"MacBook Air M2\",\n          description: \"Laptop Apple với chip M2\",\n          sku: \"MBA-M2-256GB\",\n          barcode: \"456789123\",\n          price: \"30000000\",\n          costPrice: \"27000000\",\n          image: \"https://images.unsplash.com/photo-1496181133206-80ce9b88a853?w=200&h=200&fit=crop\",\n          categoryId: \"550e8400-e29b-41d4-a716-446655440004\",\n          storeId: storeId,\n          isActive: true,\n          stockQuantity: 8,\n          minStockLevel: 3,\n          unit: \"chiếc\",\n          createdAt: new Date(),\n          updatedAt: new Date()\n        }\n    ];\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const [product] = await db\n      .insert(products)\n      .values(insertProduct)\n      .returning();\n    return product;\n  }\n\n  async updateProduct(id: string, updates: Partial<Product>): Promise<Product | undefined> {\n    const [product] = await db\n      .update(products)\n      .set(updates)\n      .where(eq(products.id, id))\n      .returning();\n    return product || undefined;\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    await db.delete(products).where(eq(products.id, id));\n  }\n\n  // Customers\n  async getCustomers(storeId: string): Promise<Customer[]> {\n    // Mock customers for demo\n    return [\n      {\n        id: \"1\",\n        name: \"Nguyễn Văn An\",\n        email: \"nguyenvanan@email.com\",\n        phone: \"0901234567\",\n        address: \"123 Lê Lợi, Q1, TP.HCM\",\n        dateOfBirth: new Date(\"1990-05-15\"),\n        customerType: \"vip\",\n        loyaltyPoints: 1500,\n        totalSpent: \"5000000\",\n        storeId: storeId,\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"2\",\n        name: \"Trần Thị Bình\",\n        email: \"tranthibinh@email.com\", \n        phone: \"0912345678\",\n        address: \"456 Nguyễn Huệ, Q1, TP.HCM\",\n        dateOfBirth: new Date(\"1985-12-20\"),\n        customerType: \"premium\",\n        loyaltyPoints: 800,\n        totalSpent: \"3200000\",\n        storeId: storeId,\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"3\",\n        name: \"Lê Văn Cường\",\n        email: \"levancuong@email.com\",\n        phone: \"0923456789\", \n        address: \"789 Trần Hưng Đạo, Q5, TP.HCM\",\n        dateOfBirth: new Date(\"1992-03-10\"),\n        customerType: \"regular\",\n        loyaltyPoints: 250,\n        totalSpent: \"1200000\",\n        storeId: storeId,\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n    ];\n  }\n\n  async createCustomer(insertCustomer: InsertCustomer): Promise<Customer> {\n    const [customer] = await db\n      .insert(customers)\n      .values(insertCustomer)\n      .returning();\n    return customer;\n  }\n\n  // Orders\n  async getOrders(storeId: string): Promise<Order[]> {\n    // Mock orders for demo\n    return [\n      {\n        id: \"550e8400-e29b-41d4-a716-446655440020\",\n        orderNumber: \"ORD-2025-001\",\n        customerId: \"1\",\n        cashierId: \"550e8400-e29b-41d4-a716-446655440001\",\n        storeId: storeId,\n        subtotal: \"25000000\",\n        taxAmount: \"2500000\",\n        discountAmount: \"1000000\",\n        total: \"26500000\",\n        paymentMethod: \"cash\",\n        paymentStatus: \"paid\",\n        status: \"completed\",\n        notes: \"Khách hàng VIP - giảm giá đặc biệt\",\n        metadata: { receiptUrl: null },\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"550e8400-e29b-41d4-a716-446655440021\", \n        orderNumber: \"ORD-2025-002\",\n        customerId: \"2\",\n        cashierId: \"550e8400-e29b-41d4-a716-446655440001\",\n        storeId: storeId,\n        subtotal: \"12000000\",\n        taxAmount: \"1200000\",\n        discountAmount: \"0\",\n        total: \"13200000\",\n        paymentMethod: \"card\",\n        paymentStatus: \"paid\",\n        status: \"completed\",\n        notes: \"\",\n        metadata: { receiptUrl: null },\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n    ];\n  }\n\n  async createOrder(insertOrder: InsertOrder, items: InsertOrderItem[]): Promise<Order> {\n    const [order] = await db\n      .insert(orders)\n      .values(insertOrder)\n      .returning();\n      \n    if (items && items.length > 0) {\n      await db.insert(orderItems).values(\n        items.map(item => ({ ...item, orderId: order.id }))\n      );\n    }\n    \n    return order;\n  }\n\n  // Categories\n  async getCategories(storeId: string): Promise<Category[]> {\n    // Mock categories for demo\n    return [\n      {\n        id: \"550e8400-e29b-41d4-a716-446655440003\",\n        name: \"Điện thoại & Tablet\", \n        description: \"Smartphone, máy tính bảng\",\n        image: null,\n        storeId: storeId,\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: \"550e8400-e29b-41d4-a716-446655440004\",\n        name: \"Laptop & PC\",\n        description: \"Máy tính xách tay và để bàn\",\n        image: null,\n        storeId: storeId, \n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: \"550e8400-e29b-41d4-a716-446655440005\",\n        name: \"Phụ kiện\",\n        description: \"Tai nghe, sạc, ốp lưng\",\n        image: null,\n        storeId: storeId,\n        isActive: true,\n        createdAt: new Date()\n      }\n    ];\n  }\n\n  // Inventory\n  async getInventoryMovements(storeId: string): Promise<InventoryMovement[]> {\n    // Mock inventory movements for demo\n    return [\n      {\n        id: \"550e8400-e29b-41d4-a716-446655440030\",\n        productId: \"550e8400-e29b-41d4-a716-446655440010\",\n        quantity: 20,\n        type: \"in\",\n        reason: \"Nhập hàng từ nhà cung cấp\",\n        previousStock: 0,\n        newStock: 20,\n        userId: \"550e8400-e29b-41d4-a716-446655440001\",\n        storeId: storeId,\n        createdAt: new Date()\n      },\n      {\n        id: \"550e8400-e29b-41d4-a716-446655440031\", \n        productId: \"550e8400-e29b-41d4-a716-446655440011\",\n        quantity: -2,\n        type: \"out\",\n        reason: \"Bán hàng\",\n        previousStock: 27,\n        newStock: 25,\n        userId: \"550e8400-e29b-41d4-a716-446655440001\",\n        storeId: storeId,\n        createdAt: new Date()\n      }\n    ];\n  }\n\n  async adjustInventory(productId: string, quantity: number, reason: string, userId: string, storeId: string): Promise<InventoryMovement> {\n    // Get current product stock\n    const [product] = await db.select().from(products).where(eq(products.id, productId));\n    const previousStock = product?.stockQuantity || 0;\n    const newStock = previousStock + quantity;\n    \n    // Update product stock\n    await db\n      .update(products)\n      .set({ stockQuantity: newStock })\n      .where(eq(products.id, productId));\n    \n    // Create inventory movement record\n    const [movement] = await db\n      .insert(inventoryMovements)\n      .values({\n        productId,\n        quantity,\n        type: quantity > 0 ? \"in\" : \"out\",\n        reason,\n        previousStock,\n        newStock,\n        userId,\n        storeId\n      })\n      .returning();\n    return movement;\n  }\n\n  // Reports\n  async getSalesSummary(storeId: string, startDate?: string, endDate?: string): Promise<any> {\n    const orders = await this.db.select({\n      id: ordersTable.id,\n      total: ordersTable.total,\n      createdAt: ordersTable.createdAt\n    })\n    .from(ordersTable);\n    \n    const totalRevenue = orders.reduce((sum, order) => sum + parseFloat(order.total), 0);\n    const totalOrders = orders.length;\n    const averageOrderValue = totalOrders > 0 ? totalRevenue / totalOrders : 0;\n    \n    return {\n      totalRevenue: totalRevenue.toLocaleString('vi-VN') + \"₫\",\n      totalOrders,\n      averageOrderValue: averageOrderValue.toLocaleString('vi-VN') + \"₫\",\n      period: `${startDate || 'Tất cả'} - ${endDate || 'hiện tại'}`\n    };\n  }\n\n  async getProductPerformance(storeId: string, startDate?: string, endDate?: string): Promise<any> {\n    // Get top performing products from order items\n    const topProducts = [\n      { name: \"iPhone 15 Pro\", totalSold: 15, revenue: \"375.000.000₫\", profit: \"45.000.000₫\" },\n      { name: \"MacBook Air M2\", totalSold: 8, revenue: \"240.000.000₫\", profit: \"24.000.000₫\" },\n      { name: \"AirPods Pro 2\", totalSold: 25, revenue: \"150.000.000₫\", profit: \"20.000.000₫\" },\n      { name: \"iPad Air 11\\\"\", totalSold: 3, revenue: \"45.000.000₫\", profit: \"6.000.000₫\" }\n    ];\n\n    return {\n      topProducts,\n      totalProductsSold: topProducts.reduce((sum, p) => sum + p.totalSold, 0),\n      mostPopularProduct: topProducts[0].name,\n      totalCategories: 4\n    };\n  }\n\n  async getCustomerAnalytics(storeId: string, startDate?: string, endDate?: string): Promise<any> {\n    const customers = await this.db.select().from(customersTable);\n    \n    return {\n      totalCustomers: customers.length,\n      newCustomers: 3,\n      returningCustomers: customers.length - 3,\n      averageOrdersPerCustomer: \"2.4\",\n      topCustomers: [\n        { name: \"Nguyễn Văn An\", orders: 8, totalSpent: \"25.000.000₫\" },\n        { name: \"Trần Thị Bích\", orders: 6, totalSpent: \"18.500.000₫\" },\n        { name: \"Lê Hoàng Nam\", orders: 4, totalSpent: \"12.300.000₫\" }\n      ]\n    };\n  }\n\n  async getProfitAnalysis(storeId: string, startDate?: string, endDate?: string): Promise<any> {\n    return {\n      totalProfit: \"95.000.000₫\",\n      profitMargin: \"18.5%\",\n      costOfGoodsSold: \"420.000.000₫\",\n      grossProfit: \"115.000.000₫\",\n      operatingExpenses: \"20.000.000₫\",\n      monthlyTrend: [\n        { month: \"07/2025\", profit: \"78.000.000₫\", margin: \"16.2%\" },\n        { month: \"08/2025\", profit: \"95.000.000₫\", margin: \"18.5%\" }\n      ],\n      topProfitableProducts: [\n        { name: \"iPhone 15 Pro\", profit: \"45.000.000₫\", margin: \"12%\" },\n        { name: \"MacBook Air M2\", profit: \"24.000.000₫\", margin: \"10%\" },\n        { name: \"AirPods Pro 2\", profit: \"20.000.000₫\", margin: \"13.3%\" }\n      ]\n    };\n  }\n\n  async getSalesReport(storeId: string, startDate: string, endDate: string): Promise<any> {\n    // Mock sales report data\n    return {\n      totalRevenue: \"125.500.000₫\",\n      totalOrders: 45,\n      averageOrderValue: \"2.788.889₫\",\n      topProducts: [\n        { name: \"iPhone 15 Pro\", quantity: 12, revenue: \"300.000.000₫\" },\n        { name: \"MacBook Air M2\", revenue: \"180.000.000₫\" },\n        { name: \"AirPods Pro\", quantity: 25, revenue: \"150.000.000₫\" }\n      ],\n      dailySales: [\n        { date: \"2025-08-20\", revenue: \"8.500.000₫\", orders: 3 },\n        { date: \"2025-08-21\", revenue: \"12.200.000₫\", orders: 5 },\n        { date: \"2025-08-22\", revenue: \"15.800.000₫\", orders: 7 }\n      ]\n    };\n  }\n}\n\n// Create storage instance\nexport const storage = new MemStorage();","size_bytes":17894},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, boolean, jsonb, uuid } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users (Staff/Employees)\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  fullName: text(\"full_name\").notNull(),\n  email: text(\"email\"),\n  role: text(\"role\").notNull().default(\"cashier\"), // owner, manager, cashier\n  avatar: text(\"avatar\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  storeId: uuid(\"store_id\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`)\n});\n\n// Stores/Branches\nexport const stores = pgTable(\"stores\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  address: text(\"address\").notNull(),\n  phone: text(\"phone\"),\n  email: text(\"email\"),\n  taxCode: text(\"tax_code\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`)\n});\n\n// Product Categories\nexport const categories = pgTable(\"categories\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  image: text(\"image\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  storeId: uuid(\"store_id\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`)\n});\n\n// Products\nexport const products = pgTable(\"products\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  sku: text(\"sku\").notNull(),\n  barcode: text(\"barcode\"),\n  price: decimal(\"price\", { precision: 12, scale: 2 }).notNull(),\n  costPrice: decimal(\"cost_price\", { precision: 12, scale: 2 }),\n  image: text(\"image\"),\n  categoryId: uuid(\"category_id\"),\n  storeId: uuid(\"store_id\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  stockQuantity: integer(\"stock_quantity\").notNull().default(0),\n  minStockLevel: integer(\"min_stock_level\").notNull().default(5),\n  unit: text(\"unit\").notNull().default(\"pcs\"), // pcs, kg, liter, etc.\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`)\n});\n\n// Customers\nexport const customers = pgTable(\"customers\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\"),\n  phone: text(\"phone\"),\n  address: text(\"address\"),\n  dateOfBirth: timestamp(\"date_of_birth\"),\n  customerType: text(\"customer_type\", { enum: [\"regular\", \"premium\", \"vip\"] }).notNull().default(\"regular\"),\n  loyaltyPoints: integer(\"loyalty_points\").notNull().default(0),\n  totalSpent: decimal(\"total_spent\", { precision: 12, scale: 2 }).notNull().default(\"0\"),\n  storeId: uuid(\"store_id\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`)\n});\n\n// Orders\nexport const orders = pgTable(\"orders\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderNumber: text(\"order_number\").notNull().unique(),\n  customerId: uuid(\"customer_id\"),\n  cashierId: uuid(\"cashier_id\").notNull(),\n  storeId: uuid(\"store_id\").notNull(),\n  subtotal: decimal(\"subtotal\", { precision: 12, scale: 2 }).notNull(),\n  taxAmount: decimal(\"tax_amount\", { precision: 12, scale: 2 }).notNull().default(\"0\"),\n  discountAmount: decimal(\"discount_amount\", { precision: 12, scale: 2 }).notNull().default(\"0\"),\n  total: decimal(\"total\", { precision: 12, scale: 2 }).notNull(),\n  paymentMethod: text(\"payment_method\").notNull(), // cash, card, qr, ewallet, transfer\n  paymentStatus: text(\"payment_status\").notNull().default(\"completed\"), // pending, completed, failed\n  status: text(\"status\").notNull().default(\"completed\"), // pending, processing, completed, cancelled\n  notes: text(\"notes\"),\n  metadata: jsonb(\"metadata\"), // For additional payment info, receipt URLs, etc.\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`)\n});\n\n// Order Items\nexport const orderItems = pgTable(\"order_items\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: uuid(\"order_id\").notNull(),\n  productId: uuid(\"product_id\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 12, scale: 2 }).notNull(),\n  totalPrice: decimal(\"total_price\", { precision: 12, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`)\n});\n\n// Promotions/Discounts\nexport const promotions = pgTable(\"promotions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  type: text(\"type\").notNull(), // percentage, fixed_amount, buy_x_get_y\n  value: decimal(\"value\", { precision: 12, scale: 2 }).notNull(),\n  minOrderAmount: decimal(\"min_order_amount\", { precision: 12, scale: 2 }),\n  maxDiscountAmount: decimal(\"max_discount_amount\", { precision: 12, scale: 2 }),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  storeId: uuid(\"store_id\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`)\n});\n\n// Inventory Movements\nexport const inventoryMovements = pgTable(\"inventory_movements\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: uuid(\"product_id\").notNull(),\n  type: text(\"type\").notNull(), // sale, purchase, adjustment, return\n  quantity: integer(\"quantity\").notNull(),\n  previousStock: integer(\"previous_stock\").notNull(),\n  newStock: integer(\"new_stock\").notNull(),\n  reason: text(\"reason\"),\n  userId: uuid(\"user_id\").notNull(),\n  storeId: uuid(\"store_id\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`)\n});\n\n// Define Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  store: one(stores, { fields: [users.storeId], references: [stores.id] }),\n  orders: many(orders),\n  inventoryMovements: many(inventoryMovements)\n}));\n\nexport const storesRelations = relations(stores, ({ many }) => ({\n  users: many(users),\n  categories: many(categories),\n  products: many(products),\n  customers: many(customers),\n  orders: many(orders),\n  promotions: many(promotions),\n  inventoryMovements: many(inventoryMovements)\n}));\n\nexport const categoriesRelations = relations(categories, ({ one, many }) => ({\n  store: one(stores, { fields: [categories.storeId], references: [stores.id] }),\n  products: many(products)\n}));\n\nexport const productsRelations = relations(products, ({ one, many }) => ({\n  category: one(categories, { fields: [products.categoryId], references: [categories.id] }),\n  store: one(stores, { fields: [products.storeId], references: [stores.id] }),\n  orderItems: many(orderItems),\n  inventoryMovements: many(inventoryMovements)\n}));\n\nexport const customersRelations = relations(customers, ({ one, many }) => ({\n  store: one(stores, { fields: [customers.storeId], references: [stores.id] }),\n  orders: many(orders)\n}));\n\nexport const ordersRelations = relations(orders, ({ one, many }) => ({\n  customer: one(customers, { fields: [orders.customerId], references: [customers.id] }),\n  cashier: one(users, { fields: [orders.cashierId], references: [users.id] }),\n  store: one(stores, { fields: [orders.storeId], references: [stores.id] }),\n  items: many(orderItems)\n}));\n\nexport const orderItemsRelations = relations(orderItems, ({ one }) => ({\n  order: one(orders, { fields: [orderItems.orderId], references: [orders.id] }),\n  product: one(products, { fields: [orderItems.productId], references: [products.id] })\n}));\n\nexport const promotionsRelations = relations(promotions, ({ one }) => ({\n  store: one(stores, { fields: [promotions.storeId], references: [stores.id] })\n}));\n\nexport const inventoryMovementsRelations = relations(inventoryMovements, ({ one }) => ({\n  product: one(products, { fields: [inventoryMovements.productId], references: [products.id] }),\n  user: one(users, { fields: [inventoryMovements.userId], references: [users.id] }),\n  store: one(stores, { fields: [inventoryMovements.storeId], references: [stores.id] })\n}));\n\n// Insert Schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\nexport const insertStoreSchema = createInsertSchema(stores).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\nexport const insertCustomerSchema = createInsertSchema(customers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertPromotionSchema = createInsertSchema(promotions).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertInventoryMovementSchema = createInsertSchema(inventoryMovements).omit({\n  id: true,\n  createdAt: true\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Store = typeof stores.$inferSelect;\nexport type InsertStore = z.infer<typeof insertStoreSchema>;\n\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\n\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\n\nexport type Customer = typeof customers.$inferSelect;\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\n\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\n\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\n\nexport type Promotion = typeof promotions.$inferSelect;\nexport type InsertPromotion = z.infer<typeof insertPromotionSchema>;\n\nexport type InventoryMovement = typeof inventoryMovements.$inferSelect;\nexport type InsertInventoryMovement = z.infer<typeof insertInventoryMovementSchema>;\n","size_bytes":10892},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Sales from \"@/pages/sales\";\nimport Products from \"@/pages/products\";\nimport Customers from \"@/pages/customers\";\nimport Inventory from \"@/pages/inventory\";\nimport Reports from \"@/pages/reports\";\nimport Staff from \"@/pages/staff\";\nimport Settings from \"@/pages/settings\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/sales\" component={Sales} />\n      <Route path=\"/products\" component={Products} />\n      <Route path=\"/customers\" component={Customers} />\n      <Route path=\"/inventory\" component={Inventory} />\n      <Route path=\"/reports\" component={Reports} />\n      <Route path=\"/staff\" component={Staff} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1359},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(180, 6.6667%, 97.0588%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(207.2, 69.2%, 41.2%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 2.9%, 26.1%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201.4286, 30.4348%, 90.9804%);\n  --input: hsl(200, 23.0769%, 97.4510%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  \n  /* POS System Colors */\n  --success: hsl(122.4, 39.4%, 49.0%);\n  --warning: hsl(35.8, 100%, 47.1%);\n  --error: hsl(356.3, 70.5%, 54.3%);\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(203.7736, 87.6033%, 52.5490%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  \n  /* POS System Colors - Dark Mode */\n  --success: hsl(122.4, 39.4%, 49.0%);\n  --warning: hsl(35.8, 100%, 47.1%);\n  --error: hsl(356.3, 70.5%, 54.3%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .text-success {\n    color: var(--success);\n  }\n  .text-warning {\n    color: var(--warning);\n  }\n  .text-error {\n    color: var(--error);\n  }\n  .bg-success {\n    background-color: var(--success);\n  }\n  .bg-warning {\n    background-color: var(--warning);\n  }\n  .bg-error {\n    background-color: var(--error);\n  }\n}\n","size_bytes":6021},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\n\nexport function useWebSocket() {\n  const ws = useRef<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<any>(null);\n\n  useEffect(() => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    ws.current = new WebSocket(wsUrl);\n\n    ws.current.onopen = () => {\n      setIsConnected(true);\n      console.log('WebSocket connected');\n    };\n\n    ws.current.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        setLastMessage(message);\n      } catch (error) {\n        console.error('Failed to parse WebSocket message:', error);\n      }\n    };\n\n    ws.current.onclose = () => {\n      setIsConnected(false);\n      console.log('WebSocket disconnected');\n    };\n\n    ws.current.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n\n    return () => {\n      if (ws.current) {\n        ws.current.close();\n      }\n    };\n  }, []);\n\n  const sendMessage = (message: any) => {\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify(message));\n    }\n  };\n\n  return { isConnected, lastMessage, sendMessage };\n}\n","size_bytes":1333},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/types.ts":{"content":"export interface DashboardMetrics {\n  todayRevenue: string;\n  todayGrowth: string;\n  ordersCount: number;\n  ordersGrowth: string;\n  newCustomers: number;\n  customersGrowth: string;\n  lowStockItems: number;\n}\n\nexport interface RevenueChartData {\n  date: string;\n  revenue: number;\n}\n\nexport interface TopProduct {\n  id: string;\n  name: string;\n  image: string;\n  soldCount: number;\n  revenue: string;\n}\n\nexport interface RecentOrder {\n  id: string;\n  orderNumber: string;\n  customer: string;\n  total: string;\n  status: string;\n  time: string;\n}\n\nexport interface LowStockItem {\n  id: string;\n  name: string;\n  image: string;\n  stock: string;\n  minStockLevel: number;\n  currentStock: number;\n}\n\nexport interface NotificationItem {\n  id: string;\n  type: 'info' | 'warning' | 'success' | 'error';\n  title: string;\n  message: string;\n  time: string;\n  read: boolean;\n}\n","size_bytes":864},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/customers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { AppLayout } from \"@/components/layout/app-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Plus, Search, Edit, Trash2, Users, Phone, Mail, MapPin, ShoppingBag, Calendar, Star } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { insertCustomerSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport type { Customer, Order } from \"@shared/schema\";\n\nconst customerFormSchema = insertCustomerSchema.extend({\n  phone: z.string().min(1, \"Số điện thoại là bắt buộc\"),\n});\n\ntype CustomerFormData = z.infer<typeof customerFormSchema>;\n\nexport default function Customers() {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedTier, setSelectedTier] = useState<string>(\"all\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingCustomer, setEditingCustomer] = useState<Customer | null>(null);\n  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);\n\n  // Fetch customers and orders\n  const { data: customers = [], isLoading } = useQuery<Customer[]>({\n    queryKey: ['/api/customers'],\n  });\n\n  const { data: orders = [] } = useQuery<Order[]>({\n    queryKey: ['/api/orders'],\n  });\n\n  // Form for adding/editing customers\n  const form = useForm<CustomerFormData>({\n    resolver: zodResolver(customerFormSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n      storeId: \"store-1\", // Should come from context\n      customerType: \"regular\",\n      loyaltyPoints: 0,\n      totalSpent: \"0\",\n    },\n  });\n\n  // Add customer mutation\n  const addCustomerMutation = useMutation({\n    mutationFn: async (customerData: CustomerFormData) => {\n      return apiRequest('/api/customers', {\n        method: 'POST',\n        body: JSON.stringify(customerData),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Thành công\",\n        description: \"Khách hàng đã được thêm thành công\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/customers'] });\n      setIsAddDialogOpen(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Lỗi\",\n        description: \"Không thể thêm khách hàng. Vui lòng thử lại.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Edit customer mutation\n  const editCustomerMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<CustomerFormData> }) => {\n      return apiRequest(`/api/customers/${id}`, {\n        method: 'PUT',\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Thành công\",\n        description: \"Thông tin khách hàng đã được cập nhật\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/customers'] });\n      setEditingCustomer(null);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Lỗi\",\n        description: \"Không thể cập nhật thông tin khách hàng\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Delete customer mutation\n  const deleteCustomerMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(`/api/customers/${id}`, {\n        method: 'DELETE',\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Thành công\",\n        description: \"Khách hàng đã được xóa\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/customers'] });\n    },\n    onError: () => {\n      toast({\n        title: \"Lỗi\",\n        description: \"Không thể xóa khách hàng\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Filter customers\n  const filteredCustomers = customers.filter(customer => {\n    const matchesSearch = customer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         customer.phone.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (customer.email && customer.email.toLowerCase().includes(searchTerm.toLowerCase()));\n    const matchesTier = selectedTier === \"all\" || customer.customerType === selectedTier;\n    return matchesSearch && matchesTier;\n  });\n\n  // Get customer orders\n  const getCustomerOrders = (customerId: string) => {\n    return orders.filter(order => order.customerId === customerId);\n  };\n\n  // Get customer tier badge\n  const getTierBadge = (type: string) => {\n    switch (type) {\n      case 'vip':\n        return { label: 'VIP', color: 'bg-purple-500' };\n      case 'premium':\n        return { label: 'Premium', color: 'bg-gold-500' };\n      case 'regular':\n        return { label: 'Thường', color: 'bg-gray-500' };\n      default:\n        return { label: 'Thường', color: 'bg-gray-500' };\n    }\n  };\n\n  // Handle form submission\n  const onSubmit = (data: CustomerFormData) => {\n    if (editingCustomer) {\n      editCustomerMutation.mutate({ id: editingCustomer.id, data });\n    } else {\n      addCustomerMutation.mutate(data);\n    }\n  };\n\n  // Handle edit customer\n  const handleEditCustomer = (customer: Customer) => {\n    setEditingCustomer(customer);\n    form.reset({\n      name: customer.name,\n      email: customer.email || \"\",\n      phone: customer.phone,\n      address: customer.address || \"\",\n      storeId: customer.storeId,\n      customerType: customer.customerType,\n      loyaltyPoints: customer.loyaltyPoints,\n      totalSpent: customer.totalSpent,\n    });\n    setIsAddDialogOpen(true);\n  };\n\n  // Handle delete customer\n  const handleDeleteCustomer = (id: string) => {\n    if (confirm(\"Bạn có chắc chắn muốn xóa khách hàng này?\")) {\n      deleteCustomerMutation.mutate(id);\n    }\n  };\n\n  return (\n    <AppLayout title=\"Khách hàng\">\n      <div data-testid=\"customers-page\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative w-80\">\n              <Input\n                placeholder=\"Tìm kiếm khách hàng...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-customer-search\"\n              />\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n            </div>\n            <Select value={selectedTier} onValueChange={setSelectedTier}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-tier-filter\">\n                <SelectValue placeholder=\"Tất cả hạng\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Tất cả hạng</SelectItem>\n                <SelectItem value=\"regular\">Thường</SelectItem>\n                <SelectItem value=\"premium\">Premium</SelectItem>\n                <SelectItem value=\"vip\">VIP</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n            <DialogTrigger asChild>\n              <Button\n                onClick={() => {\n                  setEditingCustomer(null);\n                  form.reset();\n                }}\n                data-testid=\"button-add-customer\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Thêm khách hàng\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-lg\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingCustomer ? \"Chỉnh sửa khách hàng\" : \"Thêm khách hàng mới\"}\n                </DialogTitle>\n              </DialogHeader>\n\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Họ tên *</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-customer-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Số điện thoại *</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-customer-phone\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"email\" data-testid=\"input-customer-email\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"address\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Địa chỉ</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-customer-address\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"customerType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Hạng khách hàng</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-customer-type\">\n                              <SelectValue />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"regular\">Thường</SelectItem>\n                            <SelectItem value=\"premium\">Premium</SelectItem>\n                            <SelectItem value=\"vip\">VIP</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setIsAddDialogOpen(false)}\n                      data-testid=\"button-cancel\"\n                    >\n                      Hủy\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={addCustomerMutation.isPending || editCustomerMutation.isPending}\n                      data-testid=\"button-save-customer\"\n                    >\n                      {addCustomerMutation.isPending || editCustomerMutation.isPending \n                        ? \"Đang lưu...\" \n                        : (editingCustomer ? \"Cập nhật\" : \"Thêm\")\n                      }\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Customer Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n          {isLoading ? (\n            // Loading skeleton\n            [...Array(6)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardContent className=\"p-6\">\n                  <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-4\"></div>\n                  <div className=\"h-20 bg-gray-200 rounded\"></div>\n                </CardContent>\n              </Card>\n            ))\n          ) : filteredCustomers.length === 0 ? (\n            <Card className=\"col-span-full\">\n              <CardContent className=\"p-12 text-center\">\n                <Users className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                  Không tìm thấy khách hàng\n                </h3>\n                <p className=\"text-gray-500\">\n                  {searchTerm || selectedTier !== \"all\" \n                    ? \"Thử thay đổi bộ lọc tìm kiếm\"\n                    : \"Bắt đầu bằng cách thêm khách hàng đầu tiên\"\n                  }\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            filteredCustomers.map((customer) => {\n              const tierBadge = getTierBadge(customer.customerType);\n              const customerOrders = getCustomerOrders(customer.id);\n              const lastOrderDate = customerOrders.length > 0 \n                ? new Date(customerOrders[0].createdAt).toLocaleDateString('vi-VN')\n                : \"Chưa có đơn hàng\";\n\n              return (\n                <Card \n                  key={customer.id} \n                  className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                  onClick={() => setSelectedCustomer(customer)}\n                  data-testid={`customer-card-${customer.id}`}\n                >\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div>\n                        <h3 className=\"font-semibold text-lg mb-1\" data-testid={`customer-name-${customer.id}`}>\n                          {customer.name}\n                        </h3>\n                        <Badge className={`text-white ${tierBadge.color}`}>\n                          {tierBadge.label}\n                        </Badge>\n                      </div>\n                      <div className=\"flex space-x-1\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleEditCustomer(customer);\n                          }}\n                          data-testid={`button-edit-${customer.id}`}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"text-red-600 hover:text-red-700\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleDeleteCustomer(customer.id);\n                          }}\n                          data-testid={`button-delete-${customer.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2 text-sm text-gray-600\">\n                      <div className=\"flex items-center\">\n                        <Phone className=\"w-4 h-4 mr-2\" />\n                        <span data-testid={`customer-phone-${customer.id}`}>{customer.phone}</span>\n                      </div>\n                      {customer.email && (\n                        <div className=\"flex items-center\">\n                          <Mail className=\"w-4 h-4 mr-2\" />\n                          <span data-testid={`customer-email-${customer.id}`}>{customer.email}</span>\n                        </div>\n                      )}\n                      {customer.address && (\n                        <div className=\"flex items-center\">\n                          <MapPin className=\"w-4 h-4 mr-2\" />\n                          <span className=\"line-clamp-1\" data-testid={`customer-address-${customer.id}`}>\n                            {customer.address}\n                          </span>\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"mt-4 pt-4 border-t border-gray-100\">\n                      <div className=\"grid grid-cols-2 gap-4 text-center\">\n                        <div>\n                          <p className=\"text-sm text-gray-500\">Điểm tích lũy</p>\n                          <p className=\"font-semibold text-primary\" data-testid={`customer-points-${customer.id}`}>\n                            {customer.loyaltyPoints}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-gray-500\">Tổng chi tiêu</p>\n                          <p className=\"font-semibold text-green-600\" data-testid={`customer-spent-${customer.id}`}>\n                            {parseInt(customer.totalSpent).toLocaleString('vi-VN')}₫\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"mt-2 text-center\">\n                        <p className=\"text-xs text-gray-500\">\n                          Đơn gần nhất: {lastOrderDate}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })\n          )}\n        </div>\n\n        {/* Customer Detail Modal */}\n        {selectedCustomer && (\n          <Dialog open={!!selectedCustomer} onOpenChange={() => setSelectedCustomer(null)}>\n            <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Chi tiết khách hàng</DialogTitle>\n              </DialogHeader>\n\n              <Tabs defaultValue=\"info\" className=\"space-y-4\">\n                <TabsList className=\"grid w-full grid-cols-3\">\n                  <TabsTrigger value=\"info\" data-testid=\"tab-customer-info\">Thông tin</TabsTrigger>\n                  <TabsTrigger value=\"orders\" data-testid=\"tab-customer-orders\">Đơn hàng</TabsTrigger>\n                  <TabsTrigger value=\"loyalty\" data-testid=\"tab-customer-loyalty\">Điểm thưởng</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"info\" className=\"space-y-4\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center justify-between\">\n                        <span>{selectedCustomer.name}</span>\n                        <Badge className={`text-white ${getTierBadge(selectedCustomer.customerType).color}`}>\n                          {getTierBadge(selectedCustomer.customerType).label}\n                        </Badge>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      <div className=\"flex items-center\">\n                        <Phone className=\"w-4 h-4 mr-2 text-gray-500\" />\n                        <span>{selectedCustomer.phone}</span>\n                      </div>\n                      {selectedCustomer.email && (\n                        <div className=\"flex items-center\">\n                          <Mail className=\"w-4 h-4 mr-2 text-gray-500\" />\n                          <span>{selectedCustomer.email}</span>\n                        </div>\n                      )}\n                      {selectedCustomer.address && (\n                        <div className=\"flex items-center\">\n                          <MapPin className=\"w-4 h-4 mr-2 text-gray-500\" />\n                          <span>{selectedCustomer.address}</span>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"orders\" className=\"space-y-4\">\n                  <div className=\"space-y-3\">\n                    {getCustomerOrders(selectedCustomer.id).map((order, index) => (\n                      <Card key={order.id} data-testid={`order-${index}`}>\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex justify-between items-start\">\n                            <div>\n                              <p className=\"font-medium\">Đơn hàng #{order.orderNumber}</p>\n                              <p className=\"text-sm text-gray-500\">\n                                {new Date(order.createdAt).toLocaleString('vi-VN')}\n                              </p>\n                            </div>\n                            <div className=\"text-right\">\n                              <p className=\"font-bold text-primary\">\n                                {parseInt(order.total).toLocaleString('vi-VN')}₫\n                              </p>\n                              <Badge variant={order.status === 'completed' ? 'default' : 'secondary'}>\n                                {order.status === 'completed' ? 'Hoàn thành' : 'Đang xử lý'}\n                              </Badge>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                    {getCustomerOrders(selectedCustomer.id).length === 0 && (\n                      <div className=\"text-center py-8 text-gray-500\">\n                        <ShoppingBag className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n                        <p>Khách hàng chưa có đơn hàng nào</p>\n                      </div>\n                    )}\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"loyalty\" className=\"space-y-4\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center\">\n                        <Star className=\"w-5 h-5 mr-2 text-yellow-500\" />\n                        Chương trình điểm thưởng\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-2 gap-6\">\n                        <div className=\"text-center\">\n                          <p className=\"text-2xl font-bold text-primary\">\n                            {selectedCustomer.loyaltyPoints}\n                          </p>\n                          <p className=\"text-sm text-gray-500\">Điểm hiện tại</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <p className=\"text-2xl font-bold text-green-600\">\n                            {parseInt(selectedCustomer.totalSpent).toLocaleString('vi-VN')}₫\n                          </p>\n                          <p className=\"text-sm text-gray-500\">Tổng chi tiêu</p>\n                        </div>\n                      </div>\n                      <div className=\"mt-6\">\n                        <p className=\"text-sm text-gray-600 mb-2\">Quyền lợi hạng {getTierBadge(selectedCustomer.customerType).label}:</p>\n                        <ul className=\"text-sm space-y-1\">\n                          {selectedCustomer.customerType === 'vip' && (\n                            <>\n                              <li>• Giảm giá 15% cho tất cả sản phẩm</li>\n                              <li>• Tích điểm x3</li>\n                              <li>• Ưu tiên hỗ trợ khách hàng</li>\n                            </>\n                          )}\n                          {selectedCustomer.customerType === 'premium' && (\n                            <>\n                              <li>• Giảm giá 10% cho tất cả sản phẩm</li>\n                              <li>• Tích điểm x2</li>\n                              <li>• Miễn phí giao hàng</li>\n                            </>\n                          )}\n                          {selectedCustomer.customerType === 'regular' && (\n                            <>\n                              <li>• Tích điểm tiêu chuẩn</li>\n                              <li>• Ưu đãi đặc biệt theo mùa</li>\n                            </>\n                          )}\n                        </ul>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </Tabs>\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":25885},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { useEffect } from \"react\";\nimport { AppLayout } from \"@/components/layout/app-layout\";\nimport { MetricsCards } from \"@/components/dashboard/metrics-cards\";\nimport { RevenueChart } from \"@/components/dashboard/revenue-chart\";\nimport { TopProducts } from \"@/components/dashboard/top-products\";\nimport { RecentOrders } from \"@/components/dashboard/recent-orders\";\nimport { LowStockAlerts } from \"@/components/dashboard/low-stock-alerts\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport type { DashboardMetrics, RevenueChartData, TopProduct, RecentOrder, LowStockItem } from \"@/lib/types\";\n\nexport default function Dashboard() {\n  const { lastMessage } = useWebSocket();\n\n  // Dashboard data queries\n  const { data: metrics } = useQuery<DashboardMetrics>({\n    queryKey: ['/api/dashboard/metrics'],\n  });\n\n  const { data: revenueData } = useQuery<RevenueChartData[]>({\n    queryKey: ['/api/dashboard/revenue-chart'],\n  });\n\n  const { data: topProducts } = useQuery<TopProduct[]>({\n    queryKey: ['/api/dashboard/top-products'],\n  });\n\n  const { data: recentOrders } = useQuery<RecentOrder[]>({\n    queryKey: ['/api/dashboard/recent-orders'],\n  });\n\n  const { data: lowStockItems } = useQuery<LowStockItem[]>({\n    queryKey: ['/api/dashboard/low-stock'],\n  });\n\n  // Handle real-time updates\n  useEffect(() => {\n    if (lastMessage) {\n      switch (lastMessage.type) {\n        case 'order_created':\n        case 'metrics_updated':\n          // Invalidate dashboard queries to refresh data\n          queryClient.invalidateQueries({ queryKey: ['/api/dashboard/metrics'] });\n          queryClient.invalidateQueries({ queryKey: ['/api/dashboard/recent-orders'] });\n          queryClient.invalidateQueries({ queryKey: ['/api/dashboard/revenue-chart'] });\n          break;\n        case 'inventory_updated':\n          queryClient.invalidateQueries({ queryKey: ['/api/dashboard/low-stock'] });\n          break;\n        case 'product_created':\n        case 'product_updated':\n          queryClient.invalidateQueries({ queryKey: ['/api/dashboard/top-products'] });\n          break;\n      }\n    }\n  }, [lastMessage]);\n\n  const handleViewAllOrders = () => {\n    // Would navigate to orders page\n    console.log('Navigate to orders page');\n  };\n\n  const handleViewInventory = () => {\n    // Would navigate to inventory page  \n    console.log('Navigate to inventory page');\n  };\n\n  const handleReorderItem = (itemId: string) => {\n    // Would handle reordering logic\n    console.log('Reorder item:', itemId);\n  };\n\n  return (\n    <AppLayout title=\"Dashboard\">\n      <div data-testid=\"dashboard-page\">\n        {/* Metrics Overview */}\n        <MetricsCards metrics={metrics || null} />\n\n        {/* Charts and Analytics */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          <RevenueChart data={revenueData || null} />\n          <TopProducts products={topProducts || null} />\n        </div>\n\n        {/* Recent Activities and Inventory Alerts */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <RecentOrders \n            orders={recentOrders || null}\n            onViewAll={handleViewAllOrders}\n          />\n          <LowStockAlerts \n            items={lowStockItems || null}\n            onViewInventory={handleViewInventory}\n            onReorderItem={handleReorderItem}\n          />\n        </div>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":3524},"client/src/pages/inventory.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { AppLayout } from \"@/components/layout/app-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Package, Search, AlertTriangle, TrendingUp, TrendingDown, Plus, Minus, FileText, BarChart3 } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { z } from \"zod\";\nimport type { Product } from \"@shared/schema\";\n\nconst stockAdjustmentSchema = z.object({\n  productId: z.string().min(1, \"Vui lòng chọn sản phẩm\"),\n  type: z.enum([\"adjustment\", \"stock_in\", \"stock_out\"]),\n  quantity: z.number().min(1, \"Số lượng phải lớn hơn 0\"),\n  reason: z.string().min(1, \"Vui lòng nhập lý do\"),\n  notes: z.string().optional(),\n});\n\ntype StockAdjustmentData = z.infer<typeof stockAdjustmentSchema>;\n\ninterface StockMovement {\n  id: string;\n  productId: string;\n  productName: string;\n  type: \"adjustment\" | \"stock_in\" | \"stock_out\";\n  quantity: number;\n  previousStock: number;\n  newStock: number;\n  reason: string;\n  notes?: string;\n  createdAt: Date;\n  userId: string;\n}\n\nexport default function Inventory() {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [stockFilter, setStockFilter] = useState<string>(\"all\");\n  const [isAdjustmentDialogOpen, setIsAdjustmentDialogOpen] = useState(false);\n\n  // Fetch products\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: ['/api/products'],\n  });\n\n  // Mock stock movements - in real app this would come from API\n  const stockMovements: StockMovement[] = [\n    {\n      id: \"1\",\n      productId: \"prod-1\",\n      productName: \"iPhone 13\",\n      type: \"stock_in\",\n      quantity: 50,\n      previousStock: 20,\n      newStock: 70,\n      reason: \"Nhập hàng mới\",\n      createdAt: new Date(),\n      userId: \"user-1\"\n    },\n    {\n      id: \"2\",\n      productId: \"prod-2\",\n      productName: \"Samsung Galaxy S21\",\n      type: \"stock_out\",\n      quantity: 5,\n      previousStock: 15,\n      newStock: 10,\n      reason: \"Bán hàng\",\n      createdAt: new Date(),\n      userId: \"user-1\"\n    }\n  ];\n\n  // Form for stock adjustment\n  const form = useForm<StockAdjustmentData>({\n    resolver: zodResolver(stockAdjustmentSchema),\n    defaultValues: {\n      productId: \"\",\n      type: \"adjustment\",\n      quantity: 1,\n      reason: \"\",\n      notes: \"\",\n    },\n  });\n\n  // Stock adjustment mutation\n  const adjustStockMutation = useMutation({\n    mutationFn: async (data: StockAdjustmentData) => {\n      // In real app, this would update product stock\n      return apiRequest('/api/inventory/adjust', {\n        method: 'POST',\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Thành công\",\n        description: \"Đã cập nhật tồn kho\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      setIsAdjustmentDialogOpen(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Lỗi\",\n        description: \"Không thể cập nhật tồn kho\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Filter products\n  const filteredProducts = products.filter(product => {\n    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         product.sku.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    let matchesStock = true;\n    if (stockFilter === \"low\") {\n      matchesStock = product.stockQuantity <= product.minStockLevel;\n    } else if (stockFilter === \"out\") {\n      matchesStock = product.stockQuantity === 0;\n    } else if (stockFilter === \"normal\") {\n      matchesStock = product.stockQuantity > product.minStockLevel;\n    }\n    \n    return matchesSearch && matchesStock;\n  });\n\n  // Get stock status\n  const getStockStatus = (product: Product) => {\n    if (product.stockQuantity === 0) {\n      return { label: \"Hết hàng\", color: \"bg-red-500\", icon: AlertTriangle };\n    } else if (product.stockQuantity <= product.minStockLevel) {\n      return { label: \"Sắp hết\", color: \"bg-orange-500\", icon: AlertTriangle };\n    } else {\n      return { label: \"Bình thường\", color: \"bg-green-500\", icon: Package };\n    }\n  };\n\n  // Calculate inventory metrics\n  const totalProducts = products.length;\n  const lowStockProducts = products.filter(p => p.stockQuantity <= p.minStockLevel).length;\n  const outOfStockProducts = products.filter(p => p.stockQuantity === 0).length;\n  const totalValue = products.reduce((sum, p) => sum + (parseFloat(p.price) * p.stockQuantity), 0);\n\n  // Handle form submission\n  const onSubmit = (data: StockAdjustmentData) => {\n    adjustStockMutation.mutate(data);\n  };\n\n  return (\n    <AppLayout title=\"Quản lý kho\">\n      <div data-testid=\"inventory-page\">\n        {/* Metrics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Package className=\"h-8 w-8 text-blue-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Tổng sản phẩm</p>\n                  <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"total-products\">\n                    {totalProducts}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <AlertTriangle className=\"h-8 w-8 text-orange-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Sắp hết hàng</p>\n                  <p className=\"text-2xl font-bold text-orange-600\" data-testid=\"low-stock-products\">\n                    {lowStockProducts}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <TrendingDown className=\"h-8 w-8 text-red-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Hết hàng</p>\n                  <p className=\"text-2xl font-bold text-red-600\" data-testid=\"out-of-stock-products\">\n                    {outOfStockProducts}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <BarChart3 className=\"h-8 w-8 text-green-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Giá trị tồn kho</p>\n                  <p className=\"text-2xl font-bold text-green-600\" data-testid=\"inventory-value\">\n                    {totalValue.toLocaleString('vi-VN')}₫\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"products\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"products\" data-testid=\"tab-products\">Sản phẩm</TabsTrigger>\n            <TabsTrigger value=\"movements\" data-testid=\"tab-movements\">Lịch sử xuất nhập</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"products\" className=\"space-y-6\">\n            {/* Header */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"relative w-80\">\n                  <Input\n                    placeholder=\"Tìm kiếm sản phẩm...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-product-search\"\n                  />\n                  <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                </div>\n                <Select value={stockFilter} onValueChange={setStockFilter}>\n                  <SelectTrigger className=\"w-48\" data-testid=\"select-stock-filter\">\n                    <SelectValue placeholder=\"Tất cả trạng thái\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Tất cả trạng thái</SelectItem>\n                    <SelectItem value=\"normal\">Bình thường</SelectItem>\n                    <SelectItem value=\"low\">Sắp hết hàng</SelectItem>\n                    <SelectItem value=\"out\">Hết hàng</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <Dialog open={isAdjustmentDialogOpen} onOpenChange={setIsAdjustmentDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-adjust-stock\">\n                    <Package className=\"w-4 h-4 mr-2\" />\n                    Điều chỉnh tồn kho\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Điều chỉnh tồn kho</DialogTitle>\n                  </DialogHeader>\n\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"productId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Sản phẩm *</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-adjustment-product\">\n                                  <SelectValue placeholder=\"Chọn sản phẩm\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {products.map((product) => (\n                                  <SelectItem key={product.id} value={product.id}>\n                                    {product.name} (Tồn: {product.stockQuantity})\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"type\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Loại điều chỉnh *</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-adjustment-type\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"stock_in\">Nhập kho</SelectItem>\n                                <SelectItem value=\"stock_out\">Xuất kho</SelectItem>\n                                <SelectItem value=\"adjustment\">Kiểm kê điều chỉnh</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"quantity\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Số lượng *</FormLabel>\n                            <FormControl>\n                              <Input \n                                {...field} \n                                type=\"number\" \n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                                data-testid=\"input-adjustment-quantity\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"reason\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Lý do *</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-adjustment-reason\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"notes\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Ghi chú</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-adjustment-notes\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => setIsAdjustmentDialogOpen(false)}\n                          data-testid=\"button-cancel\"\n                        >\n                          Hủy\n                        </Button>\n                        <Button\n                          type=\"submit\"\n                          disabled={adjustStockMutation.isPending}\n                          data-testid=\"button-save-adjustment\"\n                        >\n                          {adjustStockMutation.isPending ? \"Đang lưu...\" : \"Lưu\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            {/* Products Table */}\n            <Card>\n              <CardContent className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Sản phẩm\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          SKU\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Tồn kho\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Tối thiểu\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Giá trị\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Trạng thái\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {isLoading ? (\n                        [...Array(5)].map((_, i) => (\n                          <tr key={i} className=\"animate-pulse\">\n                            <td className=\"px-6 py-4\">\n                              <div className=\"h-4 bg-gray-200 rounded w-32\"></div>\n                            </td>\n                            <td className=\"px-6 py-4\">\n                              <div className=\"h-4 bg-gray-200 rounded w-20\"></div>\n                            </td>\n                            <td className=\"px-6 py-4\">\n                              <div className=\"h-4 bg-gray-200 rounded w-16\"></div>\n                            </td>\n                            <td className=\"px-6 py-4\">\n                              <div className=\"h-4 bg-gray-200 rounded w-12\"></div>\n                            </td>\n                            <td className=\"px-6 py-4\">\n                              <div className=\"h-4 bg-gray-200 rounded w-24\"></div>\n                            </td>\n                            <td className=\"px-6 py-4\">\n                              <div className=\"h-6 bg-gray-200 rounded w-20\"></div>\n                            </td>\n                          </tr>\n                        ))\n                      ) : filteredProducts.length === 0 ? (\n                        <tr>\n                          <td colSpan={6} className=\"px-6 py-12 text-center text-gray-500\">\n                            <Package className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                            <p>Không tìm thấy sản phẩm</p>\n                          </td>\n                        </tr>\n                      ) : (\n                        filteredProducts.map((product) => {\n                          const status = getStockStatus(product);\n                          const StatusIcon = status.icon;\n                          const stockValue = parseFloat(product.price) * product.stockQuantity;\n\n                          return (\n                            <tr key={product.id} data-testid={`product-row-${product.id}`}>\n                              <td className=\"px-6 py-4\">\n                                <div className=\"flex items-center\">\n                                  <img\n                                    src={product.image || \"https://images.unsplash.com/photo-1559056199-641a0ac8b55e?w=40&h=40&fit=crop\"}\n                                    alt={product.name}\n                                    className=\"w-10 h-10 rounded-lg object-cover mr-3\"\n                                  />\n                                  <div>\n                                    <p className=\"font-medium text-gray-900\" data-testid={`product-name-${product.id}`}>\n                                      {product.name}\n                                    </p>\n                                    <p className=\"text-sm text-gray-500\">\n                                      {parseInt(product.price).toLocaleString('vi-VN')}₫\n                                    </p>\n                                  </div>\n                                </div>\n                              </td>\n                              <td className=\"px-6 py-4 text-sm text-gray-900\" data-testid={`product-sku-${product.id}`}>\n                                {product.sku}\n                              </td>\n                              <td className=\"px-6 py-4\">\n                                <span className=\"text-lg font-semibold\" data-testid={`product-stock-${product.id}`}>\n                                  {product.stockQuantity}\n                                </span>\n                                <span className=\"text-sm text-gray-500 ml-1\">{product.unit}</span>\n                              </td>\n                              <td className=\"px-6 py-4 text-sm text-gray-500\" data-testid={`product-min-stock-${product.id}`}>\n                                {product.minStockLevel}\n                              </td>\n                              <td className=\"px-6 py-4 text-sm font-medium text-gray-900\" data-testid={`product-value-${product.id}`}>\n                                {stockValue.toLocaleString('vi-VN')}₫\n                              </td>\n                              <td className=\"px-6 py-4\">\n                                <Badge className={`text-white ${status.color}`} data-testid={`product-status-${product.id}`}>\n                                  <StatusIcon className=\"w-3 h-3 mr-1\" />\n                                  {status.label}\n                                </Badge>\n                              </td>\n                            </tr>\n                          );\n                        })\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"movements\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <FileText className=\"w-5 h-5 mr-2\" />\n                  Lịch sử xuất nhập kho\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {stockMovements.map((movement) => (\n                    <div \n                      key={movement.id} \n                      className=\"flex items-center justify-between p-4 border rounded-lg\"\n                      data-testid={`movement-${movement.id}`}\n                    >\n                      <div className=\"flex items-center space-x-4\">\n                        <div className={`p-2 rounded-full ${\n                          movement.type === 'stock_in' ? 'bg-green-100 text-green-600' :\n                          movement.type === 'stock_out' ? 'bg-red-100 text-red-600' :\n                          'bg-blue-100 text-blue-600'\n                        }`}>\n                          {movement.type === 'stock_in' ? <TrendingUp className=\"w-4 h-4\" /> :\n                           movement.type === 'stock_out' ? <TrendingDown className=\"w-4 h-4\" /> :\n                           <Package className=\"w-4 h-4\" />}\n                        </div>\n                        <div>\n                          <p className=\"font-medium\">{movement.productName}</p>\n                          <p className=\"text-sm text-gray-500\">{movement.reason}</p>\n                          {movement.notes && (\n                            <p className=\"text-xs text-gray-400\">{movement.notes}</p>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className={`font-semibold ${\n                          movement.type === 'stock_in' ? 'text-green-600' :\n                          movement.type === 'stock_out' ? 'text-red-600' :\n                          'text-blue-600'\n                        }`}>\n                          {movement.type === 'stock_in' ? '+' : movement.type === 'stock_out' ? '-' : '±'}\n                          {movement.quantity}\n                        </p>\n                        <p className=\"text-sm text-gray-500\">\n                          {movement.previousStock} → {movement.newStock}\n                        </p>\n                        <p className=\"text-xs text-gray-400\">\n                          {movement.createdAt.toLocaleDateString('vi-VN')}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                  {stockMovements.length === 0 && (\n                    <div className=\"text-center py-8 text-gray-500\">\n                      <FileText className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n                      <p>Chưa có hoạt động xuất nhập kho nào</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </AppLayout>\n  );\n}","size_bytes":25128},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/products.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { AppLayout } from \"@/components/layout/app-layout\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Plus, Search, Edit, Trash2, Package, AlertTriangle } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { insertProductSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport type { Product, Category } from \"@shared/schema\";\n\nconst productFormSchema = z.object({\n  name: z.string().min(1, \"Tên sản phẩm là bắt buộc\"),\n  description: z.string().optional().default(\"\"),\n  sku: z.string().min(1, \"Mã SKU là bắt buộc\"),\n  barcode: z.string().optional().default(\"\"),\n  price: z.string().min(1, \"Giá bán là bắt buộc\"),\n  costPrice: z.string().optional().default(\"\"),\n  image: z.string().optional().default(\"\"),\n  categoryId: z.string().min(1, \"Danh mục là bắt buộc\"),\n  storeId: z.string().default(\"550e8400-e29b-41d4-a716-446655440002\"),\n  isActive: z.boolean().default(true),\n  stockQuantity: z.number().min(0, \"Số lượng tồn kho phải >= 0\").default(0),\n  minStockLevel: z.number().min(0, \"Mức tồn kho tối thiểu phải >= 0\").default(5),\n  unit: z.string().default(\"chiếc\"),\n});\n\ntype ProductFormData = z.infer<typeof productFormSchema>;\n\nexport default function Products() {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n\n  // Fetch products and categories\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: ['/api/products'],\n  });\n\n  // Debug logs\n  console.log('Products data:', products);\n  console.log('Products count:', products.length);\n  console.log('isLoading:', isLoading);\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n  });\n\n  // Form for adding/editing products\n  const form = useForm<ProductFormData>({\n    resolver: zodResolver(productFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      sku: \"\",\n      barcode: \"\",\n      price: \"\",\n      costPrice: \"\",\n      categoryId: \"\",\n      storeId: \"550e8400-e29b-41d4-a716-446655440002\",\n      stockQuantity: 0,\n      minStockLevel: 5,\n      unit: \"chiếc\",\n      image: \"\",\n    },\n  });\n\n  // Add product mutation\n  const addProductMutation = useMutation({\n    mutationFn: async (productData: ProductFormData) => {\n      const formattedData = {\n        ...productData,\n        price: productData.price,\n        costPrice: productData.costPrice || null,\n      };\n      const response = await apiRequest('POST', '/api/products', formattedData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Thành công\",\n        description: \"Sản phẩm đã được thêm thành công\",\n      });\n      // Force refresh both products and categories\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      queryClient.refetchQueries({ queryKey: ['/api/products'] });\n      setIsAddDialogOpen(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Lỗi\",\n        description: \"Không thể thêm sản phẩm. Vui lòng thử lại.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Edit product mutation\n  const editProductMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<ProductFormData> }) => {\n      const response = await apiRequest('PUT', `/api/products/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Thành công\",\n        description: \"Sản phẩm đã được cập nhật\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      queryClient.refetchQueries({ queryKey: ['/api/products'] });\n      setIsAddDialogOpen(false);\n      setEditingProduct(null);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Lỗi\",\n        description: \"Không thể cập nhật sản phẩm\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Delete product mutation\n  const deleteProductMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('DELETE', `/api/products/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Thành công\",\n        description: \"Sản phẩm đã được xóa\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n    },\n    onError: () => {\n      toast({\n        title: \"Lỗi\",\n        description: \"Không thể xóa sản phẩm\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Filter products\n  const filteredProducts = products.filter(product => {\n    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         product.sku.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = selectedCategory === \"all\" || product.categoryId === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  // Debug filtered products\n  console.log('Filtered products:', filteredProducts);\n  console.log('Filtered products count:', filteredProducts.length);\n  console.log('Search term:', searchTerm);\n  console.log('Selected category:', selectedCategory);\n\n  // Handle form submission\n  const onSubmit = (data: ProductFormData) => {\n    console.log('Form submitted with data:', data);\n    console.log('Form errors:', form.formState.errors);\n    if (editingProduct) {\n      console.log('Editing product:', editingProduct);\n      editProductMutation.mutate({ id: editingProduct.id, data });\n    } else {\n      console.log('Adding new product');\n      addProductMutation.mutate(data);\n    }\n  };\n\n  // Handle edit product\n  const handleEditProduct = (product: Product) => {\n    setEditingProduct(product);\n    form.reset({\n      name: product.name,\n      description: product.description || \"\",\n      sku: product.sku,\n      barcode: product.barcode || \"\",\n      price: product.price,\n      costPrice: product.costPrice || \"\",\n      categoryId: product.categoryId || \"\",\n      storeId: product.storeId,\n      stockQuantity: product.stockQuantity,\n      minStockLevel: product.minStockLevel,\n      unit: product.unit,\n      image: product.image || \"\",\n    });\n    setIsAddDialogOpen(true);\n  };\n\n  // Handle delete product\n  const handleDeleteProduct = (id: string) => {\n    if (confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) {\n      deleteProductMutation.mutate(id);\n    }\n  };\n\n  // Get stock status\n  const getStockStatus = (product: Product) => {\n    if (product.stockQuantity === 0) {\n      return { label: \"Hết hàng\", color: \"bg-red-500\" };\n    } else if (product.stockQuantity <= product.minStockLevel) {\n      return { label: \"Sắp hết\", color: \"bg-orange-500\" };\n    } else {\n      return { label: \"Còn hàng\", color: \"bg-green-500\" };\n    }\n  };\n\n  return (\n    <AppLayout title=\"Sản phẩm\">\n      <div data-testid=\"products-page\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative w-80\">\n              <Input\n                placeholder=\"Tìm kiếm sản phẩm...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-product-search\"\n              />\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n            </div>\n            <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-category-filter\">\n                <SelectValue placeholder=\"Tất cả danh mục\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Tất cả danh mục</SelectItem>\n                {categories.map((category) => (\n                  <SelectItem key={category.id} value={category.id}>\n                    {category.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n            <DialogTrigger asChild>\n              <Button\n                onClick={() => {\n                  setEditingProduct(null);\n                  form.reset();\n                }}\n                data-testid=\"button-add-product\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Thêm sản phẩm\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingProduct ? \"Chỉnh sửa sản phẩm\" : \"Thêm sản phẩm mới\"}\n                </DialogTitle>\n              </DialogHeader>\n\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Tên sản phẩm *</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-product-name\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"sku\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Mã SKU *</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-product-sku\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"barcode\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Mã vạch</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-product-barcode\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"categoryId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Danh mục</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-product-category\">\n                                <SelectValue placeholder=\"Chọn danh mục\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {categories.map((category) => (\n                                <SelectItem key={category.id} value={category.id}>\n                                  {category.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"price\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Giá bán *</FormLabel>\n                          <FormControl>\n                            <Input \n                              {...field} \n                              type=\"number\" \n                              placeholder=\"0\"\n                              data-testid=\"input-product-price\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"costPrice\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Giá vốn</FormLabel>\n                          <FormControl>\n                            <Input \n                              {...field} \n                              type=\"number\" \n                              placeholder=\"0\"\n                              data-testid=\"input-product-cost\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"stockQuantity\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Số lượng tồn kho</FormLabel>\n                          <FormControl>\n                            <Input \n                              {...field} \n                              type=\"number\" \n                              onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              data-testid=\"input-product-stock\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"minStockLevel\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Mức tồn kho tối thiểu</FormLabel>\n                          <FormControl>\n                            <Input \n                              {...field} \n                              type=\"number\" \n                              onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              data-testid=\"input-product-min-stock\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"unit\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Đơn vị</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-product-unit\">\n                                <SelectValue />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"chiếc\">Chiếc</SelectItem>\n                              <SelectItem value=\"cặp\">Cặp</SelectItem>\n                              <SelectItem value=\"kg\">Kg</SelectItem>\n                              <SelectItem value=\"liter\">Lít</SelectItem>\n                              <SelectItem value=\"thùng\">Thùng</SelectItem>\n                              <SelectItem value=\"gói\">Gói</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"image\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>URL hình ảnh</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-product-image\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Mô tả</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            {...field} \n                            rows={3}\n                            data-testid=\"textarea-product-description\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setIsAddDialogOpen(false)}\n                      data-testid=\"button-cancel\"\n                    >\n                      Hủy\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={addProductMutation.isPending || editProductMutation.isPending}\n                      data-testid=\"button-save-product\"\n                      onClick={() => console.log('Submit button clicked')}\n                    >\n                      {addProductMutation.isPending || editProductMutation.isPending \n                        ? \"Đang lưu...\" \n                        : (editingProduct ? \"Cập nhật\" : \"Thêm\")\n                      }\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Products Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {isLoading ? (\n            // Loading skeleton\n            [...Array(8)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardContent className=\"p-4\">\n                  <div className=\"w-full h-48 bg-gray-200 rounded-lg mb-4\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                </CardContent>\n              </Card>\n            ))\n          ) : filteredProducts.length === 0 ? (\n            <Card className=\"col-span-full\">\n              <CardContent className=\"p-12 text-center\">\n                <Package className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                  Không tìm thấy sản phẩm\n                </h3>\n                <p className=\"text-gray-500\">\n                  {searchTerm || selectedCategory !== \"all\" \n                    ? \"Thử thay đổi bộ lọc tìm kiếm\"\n                    : \"Bắt đầu bằng cách thêm sản phẩm đầu tiên\"\n                  }\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            filteredProducts.map((product) => {\n              const stockStatus = getStockStatus(product);\n              return (\n                <Card key={product.id} className=\"overflow-hidden\" data-testid={`product-card-${product.id}`}>\n                  <CardContent className=\"p-0\">\n                    <div className=\"relative\">\n                      <img\n                        src={product.image || \"https://images.unsplash.com/photo-1559056199-641a0ac8b55e?w=300&h=200&fit=crop\"}\n                        alt={product.name}\n                        className=\"w-full h-48 object-cover\"\n                      />\n                      <Badge\n                        className={`absolute top-2 right-2 text-white ${stockStatus.color}`}\n                        data-testid={`stock-status-${product.id}`}\n                      >\n                        {stockStatus.label}\n                      </Badge>\n                      {product.stockQuantity <= product.minStockLevel && (\n                        <AlertTriangle className=\"absolute top-2 left-2 w-5 h-5 text-orange-500\" />\n                      )}\n                    </div>\n                    \n                    <div className=\"p-4\">\n                      <h3 className=\"font-semibold text-lg mb-1 line-clamp-2\" data-testid={`product-name-${product.id}`}>\n                        {product.name}\n                      </h3>\n                      <p className=\"text-sm text-gray-600 mb-2\">SKU: {product.sku}</p>\n                      \n                      <div className=\"flex items-center justify-between mb-3\">\n                        <div>\n                          <p className=\"text-2xl font-bold text-primary\" data-testid={`product-price-${product.id}`}>\n                            {parseInt(product.price).toLocaleString('vi-VN')}₫\n                          </p>\n                          {product.costPrice && (\n                            <p className=\"text-sm text-gray-500\">\n                              Vốn: {parseInt(product.costPrice).toLocaleString('vi-VN')}₫\n                            </p>\n                          )}\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"text-sm font-medium\" data-testid={`product-stock-${product.id}`}>\n                            Tồn: {product.stockQuantity} {product.unit}\n                          </p>\n                          <p className=\"text-xs text-gray-500\">\n                            Tối thiểu: {product.minStockLevel}\n                          </p>\n                        </div>\n                      </div>\n\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"flex-1\"\n                          onClick={() => handleEditProduct(product)}\n                          data-testid={`button-edit-${product.id}`}\n                        >\n                          <Edit className=\"w-4 h-4 mr-2\" />\n                          Sửa\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"text-red-600 hover:text-red-700\"\n                          onClick={() => handleDeleteProduct(product.id)}\n                          data-testid={`button-delete-${product.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })\n          )}\n        </div>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":24750},"client/src/pages/reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { AppLayout } from \"@/components/layout/app-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  BarChart, \n  Bar, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  LineChart,\n  Line\n} from \"recharts\";\nimport { \n  TrendingUp, \n  TrendingDown,\n  DollarSign, \n  ShoppingCart, \n  Users, \n  Package,\n  Calendar,\n  Download,\n  Filter,\n  BarChart3,\n  PieChart as PieChartIcon,\n  LineChart as LineChartIcon\n} from \"lucide-react\";\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8'];\n\nexport default function Reports() {\n  const [dateRange, setDateRange] = useState({\n    startDate: \"2025-08-01\",\n    endDate: \"2025-08-26\"\n  });\n  const [reportType, setReportType] = useState(\"summary\");\n\n  // Fetch report data\n  const { data: salesSummary, isLoading: salesLoading } = useQuery({\n    queryKey: ['/api/reports/sales-summary', dateRange.startDate, dateRange.endDate],\n  });\n\n  const { data: productPerformance, isLoading: productLoading } = useQuery({\n    queryKey: ['/api/reports/product-performance', dateRange.startDate, dateRange.endDate],\n  });\n\n  const { data: customerAnalytics, isLoading: customerLoading } = useQuery({\n    queryKey: ['/api/reports/customer-analytics', dateRange.startDate, dateRange.endDate],\n  });\n\n  const { data: profitAnalysis, isLoading: profitLoading } = useQuery({\n    queryKey: ['/api/reports/profit-analysis', dateRange.startDate, dateRange.endDate],\n  });\n\n  const isLoading = salesLoading || productLoading || customerLoading || profitLoading;\n\n  // Chart data formatting\n  const chartData = productPerformance?.topProducts?.map(product => ({\n    name: product.name,\n    revenue: parseFloat(product.revenue.replace(/[₫.,]/g, '')),\n    sold: product.totalSold\n  })) || [];\n\n  const pieData = productPerformance?.topProducts?.slice(0, 4).map((product, index) => ({\n    name: product.name,\n    value: parseFloat(product.revenue.replace(/[₫.,]/g, '')),\n    color: COLORS[index]\n  })) || [];\n\n  const profitTrendData = profitAnalysis?.monthlyTrend?.map(item => ({\n    month: item.month,\n    profit: parseFloat(item.profit.replace(/[₫.,]/g, '')),\n    margin: parseFloat(item.margin.replace('%', ''))\n  })) || [];\n\n  return (\n    <AppLayout title=\"Báo cáo & Phân tích\">\n      <div className=\"space-y-6\" data-testid=\"reports-page\">\n        {/* Filters */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Filter className=\"w-5 h-5\" />\n              Bộ lọc báo cáo\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"space-y-2\">\n                <Label>Từ ngày</Label>\n                <Input\n                  type=\"date\"\n                  value={dateRange.startDate}\n                  onChange={(e) => setDateRange(prev => ({ ...prev, startDate: e.target.value }))}\n                  data-testid=\"input-start-date\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label>Đến ngày</Label>\n                <Input\n                  type=\"date\"\n                  value={dateRange.endDate}\n                  onChange={(e) => setDateRange(prev => ({ ...prev, endDate: e.target.value }))}\n                  data-testid=\"input-end-date\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label>Loại báo cáo</Label>\n                <Select value={reportType} onValueChange={setReportType}>\n                  <SelectTrigger data-testid=\"select-report-type\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"summary\">Tổng quan</SelectItem>\n                    <SelectItem value=\"detailed\">Chi tiết</SelectItem>\n                    <SelectItem value=\"comparison\">So sánh</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"flex items-end\">\n                <Button className=\"w-full\" data-testid=\"button-export\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Xuất báo cáo\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {[...Array(4)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardContent className=\"p-6\">\n                  <div className=\"h-8 bg-gray-200 rounded mb-4\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded\"></div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"overview\">Tổng quan</TabsTrigger>\n              <TabsTrigger value=\"products\">Sản phẩm</TabsTrigger>\n              <TabsTrigger value=\"customers\">Khách hàng</TabsTrigger>\n              <TabsTrigger value=\"profit\">Lợi nhuận</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"overview\" className=\"space-y-6\">\n              {/* Summary Cards */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                <Card data-testid=\"card-total-revenue\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Tổng doanh thu</p>\n                        <p className=\"text-2xl font-bold\">{salesSummary?.totalRevenue || \"0₫\"}</p>\n                      </div>\n                      <DollarSign className=\"h-8 w-8 text-green-600\" />\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <TrendingUp className=\"h-4 w-4 text-green-600 mr-1\" />\n                      <span className=\"text-xs text-green-600\">+12.5% so với tháng trước</span>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card data-testid=\"card-total-orders\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Tổng đơn hàng</p>\n                        <p className=\"text-2xl font-bold\">{salesSummary?.totalOrders || 0}</p>\n                      </div>\n                      <ShoppingCart className=\"h-8 w-8 text-blue-600\" />\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <TrendingUp className=\"h-4 w-4 text-green-600 mr-1\" />\n                      <span className=\"text-xs text-green-600\">+8.2% so với tháng trước</span>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card data-testid=\"card-total-customers\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Tổng khách hàng</p>\n                        <p className=\"text-2xl font-bold\">{customerAnalytics?.totalCustomers || 0}</p>\n                      </div>\n                      <Users className=\"h-8 w-8 text-purple-600\" />\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <TrendingUp className=\"h-4 w-4 text-green-600 mr-1\" />\n                      <span className=\"text-xs text-green-600\">+{customerAnalytics?.newCustomers || 0} khách mới</span>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card data-testid=\"card-products-sold\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Sản phẩm bán ra</p>\n                        <p className=\"text-2xl font-bold\">{productPerformance?.totalProductsSold || 0}</p>\n                      </div>\n                      <Package className=\"h-8 w-8 text-orange-600\" />\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <span className=\"text-xs text-muted-foreground\">Phổ biến: {productPerformance?.mostPopularProduct || \"N/A\"}</span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Revenue Chart */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <BarChart3 className=\"w-5 h-5\" />\n                    Doanh thu theo sản phẩm\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <BarChart data={chartData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"name\" />\n                      <YAxis />\n                      <Tooltip formatter={(value) => [value.toLocaleString('vi-VN') + '₫', 'Doanh thu']} />\n                      <Bar dataKey=\"revenue\" fill=\"#8884d8\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"products\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Product Performance Table */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Top sản phẩm bán chạy</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {productPerformance?.topProducts?.map((product, index) => (\n                        <div key={product.name} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                          <div className=\"flex items-center gap-3\">\n                            <Badge variant=\"outline\">{index + 1}</Badge>\n                            <div>\n                              <p className=\"font-medium\">{product.name}</p>\n                              <p className=\"text-sm text-muted-foreground\">Đã bán: {product.totalSold}</p>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-medium\">{product.revenue}</p>\n                            <p className=\"text-sm text-green-600\">{product.profit}</p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Product Revenue Pie Chart */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <PieChartIcon className=\"w-5 h-5\" />\n                      Phân bố doanh thu\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ResponsiveContainer width=\"100%\" height={300}>\n                      <PieChart>\n                        <Pie\n                          data={pieData}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          outerRadius={80}\n                          fill=\"#8884d8\"\n                          dataKey=\"value\"\n                        >\n                          {pieData.map((entry, index) => (\n                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                          ))}\n                        </Pie>\n                        <Tooltip formatter={(value) => [value.toLocaleString('vi-VN') + '₫', 'Doanh thu']} />\n                      </PieChart>\n                    </ResponsiveContainer>\n                    <div className=\"flex flex-wrap gap-2 mt-4\">\n                      {pieData.map((entry, index) => (\n                        <div key={entry.name} className=\"flex items-center gap-2\">\n                          <div \n                            className=\"w-3 h-3 rounded-full\" \n                            style={{ backgroundColor: COLORS[index % COLORS.length] }}\n                          ></div>\n                          <span className=\"text-xs\">{entry.name}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"customers\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Customer Stats */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Thống kê khách hàng</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span>Tổng khách hàng:</span>\n                      <Badge variant=\"outline\">{customerAnalytics?.totalCustomers}</Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span>Khách hàng mới:</span>\n                      <Badge className=\"bg-green-100 text-green-800\">{customerAnalytics?.newCustomers}</Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span>Khách hàng quay lại:</span>\n                      <Badge className=\"bg-blue-100 text-blue-800\">{customerAnalytics?.returningCustomers}</Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span>Trung bình đơn/khách:</span>\n                      <Badge variant=\"outline\">{customerAnalytics?.averageOrdersPerCustomer}</Badge>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Top Customers */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Khách hàng VIP</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {customerAnalytics?.topCustomers?.map((customer, index) => (\n                        <div key={customer.name} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                          <div className=\"flex items-center gap-3\">\n                            <Badge variant=\"outline\">{index + 1}</Badge>\n                            <div>\n                              <p className=\"font-medium\">{customer.name}</p>\n                              <p className=\"text-sm text-muted-foreground\">{customer.orders} đơn hàng</p>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-medium text-green-600\">{customer.totalSpent}</p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"profit\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Profit Summary */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Tổng quan lợi nhuận</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span>Lợi nhuận gộp:</span>\n                        <span className=\"font-medium text-green-600\">{profitAnalysis?.grossProfit}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Chi phí hàng bán:</span>\n                        <span className=\"font-medium\">{profitAnalysis?.costOfGoodsSold}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Chi phí hoạt động:</span>\n                        <span className=\"font-medium text-red-600\">{profitAnalysis?.operatingExpenses}</span>\n                      </div>\n                      <hr />\n                      <div className=\"flex justify-between text-lg\">\n                        <span className=\"font-semibold\">Lợi nhuận ròng:</span>\n                        <span className=\"font-bold text-green-600\">{profitAnalysis?.totalProfit}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Tỷ suất lợi nhuận:</span>\n                        <Badge className=\"bg-green-100 text-green-800\">{profitAnalysis?.profitMargin}</Badge>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Profit Trend */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <LineChartIcon className=\"w-5 h-5\" />\n                      Xu hướng lợi nhuận\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ResponsiveContainer width=\"100%\" height={250}>\n                      <LineChart data={profitTrendData}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"month\" />\n                        <YAxis />\n                        <Tooltip formatter={(value) => [value.toLocaleString('vi-VN') + '₫', 'Lợi nhuận']} />\n                        <Line type=\"monotone\" dataKey=\"profit\" stroke=\"#8884d8\" strokeWidth={2} />\n                      </LineChart>\n                    </ResponsiveContainer>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Top Profitable Products */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Sản phẩm sinh lời cao nhất</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {profitAnalysis?.topProfitableProducts?.map((product, index) => (\n                      <div key={product.name} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                        <div className=\"flex items-center gap-3\">\n                          <Badge variant=\"outline\">{index + 1}</Badge>\n                          <div>\n                            <p className=\"font-medium\">{product.name}</p>\n                            <p className=\"text-sm text-muted-foreground\">Tỷ suất: {product.margin}</p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-medium text-green-600\">{product.profit}</p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        )}\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":20563},"client/src/pages/sales.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { AppLayout } from \"@/components/layout/app-layout\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Search, Plus, Minus, Trash2, ShoppingCart, CreditCard, Banknote, QrCode, Smartphone } from \"lucide-react\";\nimport type { Product, Customer } from \"@shared/schema\";\n\ninterface CartItem extends Product {\n  quantity: number;\n  totalPrice: number;\n}\n\ninterface PaymentMethod {\n  id: string;\n  name: string;\n  icon: any;\n  color: string;\n}\n\nconst paymentMethods: PaymentMethod[] = [\n  { id: 'cash', name: 'Tiền mặt', icon: Banknote, color: 'bg-green-500' },\n  { id: 'card', name: 'Thẻ', icon: CreditCard, color: 'bg-blue-500' },\n  { id: 'qr', name: 'QR Code', icon: QrCode, color: 'bg-purple-500' },\n  { id: 'ewallet', name: 'Ví điện tử', icon: Smartphone, color: 'bg-orange-500' },\n];\n\nexport default function Sales() {\n  const { toast } = useToast();\n  const [cart, setCart] = useState<CartItem[]>([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);\n  const [selectedPayment, setSelectedPayment] = useState<string>(\"cash\");\n  const [showPayment, setShowPayment] = useState(false);\n\n  // Fetch products and customers\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: ['/api/products'],\n  });\n\n  const { data: customers = [] } = useQuery<Customer[]>({\n    queryKey: ['/api/customers'],\n  });\n\n  // Create order mutation\n  const createOrderMutation = useMutation({\n    mutationFn: async (orderData: any) => {\n      const response = await apiRequest('POST', '/api/orders', orderData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Thành công\",\n        description: \"Đơn hàng đã được tạo thành công\",\n      });\n      setCart([]);\n      setSelectedCustomer(null);\n      setShowPayment(false);\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/metrics'] });\n    },\n    onError: () => {\n      toast({\n        title: \"Lỗi\",\n        description: \"Không thể tạo đơn hàng. Vui lòng thử lại.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Filter products based on search\n  const filteredProducts = products.filter(product =>\n    product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    product.sku.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Cart calculations\n  const subtotal = cart.reduce((sum, item) => sum + item.totalPrice, 0);\n  const taxRate = 0.1; // 10% VAT\n  const taxAmount = subtotal * taxRate;\n  const total = subtotal + taxAmount;\n\n  // Add product to cart\n  const addToCart = (product: Product) => {\n    console.log('Adding product to cart:', product);\n    const existingItem = cart.find(item => item.id === product.id);\n    \n    if (existingItem) {\n      console.log('Product exists, updating quantity');\n      updateQuantity(product.id, existingItem.quantity + 1);\n    } else {\n      console.log('New product, adding to cart');\n      const newItem: CartItem = {\n        ...product,\n        quantity: 1,\n        totalPrice: parseFloat(product.price)\n      };\n      setCart([...cart, newItem]);\n      console.log('Cart after adding:', [...cart, newItem]);\n    }\n  };\n\n  // Update quantity\n  const updateQuantity = (productId: string, newQuantity: number) => {\n    if (newQuantity <= 0) {\n      removeFromCart(productId);\n      return;\n    }\n\n    setCart(cart.map(item => \n      item.id === productId \n        ? { \n            ...item, \n            quantity: newQuantity, \n            totalPrice: parseFloat(item.price) * newQuantity \n          }\n        : item\n    ));\n  };\n\n  // Remove from cart\n  const removeFromCart = (productId: string) => {\n    setCart(cart.filter(item => item.id !== productId));\n  };\n\n  // Clear cart\n  const clearCart = () => {\n    setCart([]);\n  };\n\n  // Process payment\n  const processPayment = () => {\n    if (cart.length === 0) {\n      toast({\n        title: \"Giỏ hàng trống\",\n        description: \"Vui lòng thêm sản phẩm vào giỏ hàng\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const orderData = {\n      orderNumber: `ORD${Date.now()}`,\n      customerId: selectedCustomer?.id || null,\n      cashierId: \"550e8400-e29b-41d4-a716-446655440001\", // UUID for cashier\n      storeId: \"550e8400-e29b-41d4-a716-446655440002\", // UUID for store\n      subtotal: subtotal.toString(),\n      taxAmount: taxAmount.toString(),\n      discountAmount: \"0\",\n      total: total.toString(),\n      paymentMethod: selectedPayment,\n      paymentStatus: \"completed\",\n      status: \"completed\",\n      items: cart.map(item => ({\n        productId: item.id,\n        quantity: item.quantity,\n        unitPrice: item.price,\n        totalPrice: item.totalPrice.toString()\n      }))\n    };\n\n    createOrderMutation.mutate(orderData);\n  };\n\n  return (\n    <AppLayout title=\"Bán hàng\">\n      <div className=\"flex h-full gap-6\" data-testid=\"sales-page\">\n        {/* Products Section */}\n        <div className=\"flex-1\">\n          <Card className=\"h-full\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h2 className=\"text-xl font-semibold\">Sản phẩm</h2>\n                <div className=\"relative w-80\">\n                  <Input\n                    placeholder=\"Tìm kiếm sản phẩm...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-product-search\"\n                  />\n                  <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 max-h-[calc(100vh-300px)] overflow-y-auto\">\n                {filteredProducts.map((product) => (\n                  <div \n                    key={product.id} \n                    className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                    onClick={() => {\n                      console.log('Product clicked:', product);\n                      addToCart(product);\n                    }}\n                    data-testid={`product-card-${product.id}`}\n                  >\n                    <Card>\n                      <CardContent className=\"p-4\">\n                        <img\n                          src={product.image || \"https://images.unsplash.com/photo-1559056199-641a0ac8b55e?w=200&h=150&fit=crop\"}\n                          alt={product.name}\n                          className=\"w-full h-32 object-cover rounded-lg mb-3\"\n                        />\n                        <h3 className=\"font-medium text-sm mb-1 line-clamp-2\">{product.name}</h3>\n                        <p className=\"text-lg font-bold text-primary\">{parseInt(product.price).toLocaleString('vi-VN')}₫</p>\n                        <p className=\"text-xs text-gray-500\">Tồn: {product.stockQuantity}</p>\n                        <Button \n                          className=\"w-full mt-2\" \n                          size=\"sm\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            console.log('Button clicked for product:', product);\n                            addToCart(product);\n                          }}\n                        >\n                          <Plus className=\"w-4 h-4 mr-1\" />\n                          Thêm vào giỏ\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Cart Section */}\n        <div className=\"w-96\">\n          <Card className=\"h-full\">\n            <CardContent className=\"p-6 flex flex-col h-full\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h2 className=\"text-xl font-semibold flex items-center\">\n                  <ShoppingCart className=\"w-5 h-5 mr-2\" />\n                  Giỏ hàng ({cart.length})\n                </h2>\n                {cart.length > 0 && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={clearCart}\n                    data-testid=\"button-clear-cart\"\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </Button>\n                )}\n              </div>\n\n              {/* Customer Selection */}\n              <div className=\"mb-4\">\n                <Select \n                  value={selectedCustomer?.id || \"\"} \n                  onValueChange={(value) => {\n                    const customer = customers.find(c => c.id === value);\n                    setSelectedCustomer(customer || null);\n                  }}\n                >\n                  <SelectTrigger data-testid=\"select-customer\">\n                    <SelectValue placeholder=\"Chọn khách hàng (tùy chọn)\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"walk-in\">Khách vãng lai</SelectItem>\n                    {customers.map((customer) => (\n                      <SelectItem key={customer.id} value={customer.id}>\n                        {customer.name} - {customer.phone}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Cart Items */}\n              <div className=\"flex-1 overflow-y-auto space-y-3 mb-4\">\n                {cart.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <ShoppingCart className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n                    <p>Giỏ hàng trống</p>\n                  </div>\n                ) : (\n                  cart.map((item) => (\n                    <div key={item.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\" data-testid={`cart-item-${item.id}`}>\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium text-sm\">{item.name}</p>\n                        <p className=\"text-primary font-semibold\">{parseInt(item.price).toLocaleString('vi-VN')}₫</p>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => updateQuantity(item.id, item.quantity - 1)}\n                          data-testid={`button-decrease-${item.id}`}\n                        >\n                          <Minus className=\"w-3 h-3\" />\n                        </Button>\n                        <span className=\"w-8 text-center\" data-testid={`quantity-${item.id}`}>{item.quantity}</span>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => updateQuantity(item.id, item.quantity + 1)}\n                          data-testid={`button-increase-${item.id}`}\n                        >\n                          <Plus className=\"w-3 h-3\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => removeFromCart(item.id)}\n                          data-testid={`button-remove-${item.id}`}\n                        >\n                          <Trash2 className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n\n              {/* Order Summary */}\n              {cart.length > 0 && (\n                <div className=\"space-y-2 mb-4\">\n                  <Separator />\n                  <div className=\"flex justify-between\">\n                    <span>Tạm tính:</span>\n                    <span data-testid=\"subtotal\">{subtotal.toLocaleString('vi-VN')}₫</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>VAT (10%):</span>\n                    <span data-testid=\"tax\">{taxAmount.toLocaleString('vi-VN')}₫</span>\n                  </div>\n                  <Separator />\n                  <div className=\"flex justify-between text-lg font-bold\">\n                    <span>Tổng cộng:</span>\n                    <span data-testid=\"total\">{total.toLocaleString('vi-VN')}₫</span>\n                  </div>\n                </div>\n              )}\n\n              {/* Payment Methods */}\n              {cart.length > 0 && (\n                <div className=\"space-y-3\">\n                  <p className=\"font-medium\">Phương thức thanh toán:</p>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {paymentMethods.map((method) => {\n                      const Icon = method.icon;\n                      return (\n                        <Button\n                          key={method.id}\n                          variant={selectedPayment === method.id ? \"default\" : \"outline\"}\n                          size=\"sm\"\n                          onClick={() => setSelectedPayment(method.id)}\n                          className=\"h-12\"\n                          data-testid={`payment-${method.id}`}\n                        >\n                          <Icon className=\"w-4 h-4 mr-2\" />\n                          {method.name}\n                        </Button>\n                      );\n                    })}\n                  </div>\n                </div>\n              )}\n\n              {/* Action Buttons */}\n              <div className=\"space-y-2 mt-4\">\n                <Button\n                  className=\"w-full h-12 text-lg\"\n                  onClick={processPayment}\n                  disabled={cart.length === 0 || createOrderMutation.isPending}\n                  data-testid=\"button-process-payment\"\n                >\n                  {createOrderMutation.isPending ? \"Đang xử lý...\" : \"Thanh toán\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":14869},"client/src/pages/settings.tsx":{"content":"import { AppLayout } from \"@/components/layout/app-layout\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function Settings() {\n  return (\n    <AppLayout title=\"Cài đặt\">\n      <div data-testid=\"settings-page\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"text-center py-12\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\n                Cài đặt hệ thống\n              </h2>\n              <p className=\"text-gray-600\">\n                Cấu hình cửa hàng, thuế, thanh toán, in ấn sẽ được triển khai ở đây\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":743},"client/src/pages/staff.tsx":{"content":"import { AppLayout } from \"@/components/layout/app-layout\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function Staff() {\n  return (\n    <AppLayout title=\"Nhân viên\">\n      <div data-testid=\"staff-page\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"text-center py-12\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\n                Quản lý nhân viên\n              </h2>\n              <p className=\"text-gray-600\">\n                Tài khoản, phân quyền, nhật ký hoạt động sẽ được triển khai ở đây\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":736},"client/src/components/dashboard/low-stock-alerts.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport type { LowStockItem } from \"@/lib/types\";\n\ninterface LowStockAlertsProps {\n  items: LowStockItem[] | null;\n  onViewInventory: () => void;\n  onReorderItem: (itemId: string) => void;\n}\n\nexport function LowStockAlerts({ items, onViewInventory, onReorderItem }: LowStockAlertsProps) {\n  if (!items) {\n    return (\n      <Card className=\"shadow-sm border border-gray-200\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Cảnh báo tồn kho</h3>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onViewInventory}>\n              Xem kho hàng\n            </Button>\n          </div>\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"flex items-center justify-between p-3 bg-red-50 rounded-lg border border-red-200 animate-pulse\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-gray-200 rounded-lg\"></div>\n                  <div>\n                    <div className=\"h-4 bg-gray-200 rounded w-24 mb-1\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-16\"></div>\n                  </div>\n                </div>\n                <div className=\"h-8 bg-gray-200 rounded w-20\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const getAlertStyle = (currentStock: number, minStock: number) => {\n    if (currentStock === 0) {\n      return \"bg-red-50 border-red-200\";\n    } else if (currentStock <= minStock * 0.5) {\n      return \"bg-red-50 border-red-200\";\n    } else {\n      return \"bg-orange-50 border-orange-200\";\n    }\n  };\n\n  const getStockColor = (currentStock: number, minStock: number) => {\n    if (currentStock === 0) {\n      return \"text-error\";\n    } else if (currentStock <= minStock * 0.5) {\n      return \"text-error\";\n    } else {\n      return \"text-warning\";\n    }\n  };\n\n  const getButtonStyle = (currentStock: number, minStock: number) => {\n    if (currentStock === 0 || currentStock <= minStock * 0.5) {\n      return \"bg-error hover:bg-red-700\";\n    } else {\n      return \"bg-warning hover:bg-orange-600\";\n    }\n  };\n\n  return (\n    <Card className=\"shadow-sm border border-gray-200\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900\" data-testid=\"low-stock-title\">\n            Cảnh báo tồn kho\n          </h3>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={onViewInventory}\n            className=\"text-primary hover:underline\"\n            data-testid=\"button-view-inventory\"\n          >\n            Xem kho hàng\n          </Button>\n        </div>\n        <div className=\"space-y-4\">\n          {items.map((item, index) => (\n            <div \n              key={item.id} \n              className={`flex items-center justify-between p-3 rounded-lg border ${getAlertStyle(item.currentStock, item.minStockLevel)}`}\n              data-testid={`low-stock-item-${index}`}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <img \n                  src={item.image || \"https://images.unsplash.com/photo-1550681560-af9bc1cb339e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=60&h=60\"} \n                  alt={item.name}\n                  className=\"w-10 h-10 rounded-lg object-cover\"\n                  data-testid={`stock-item-image-${index}`}\n                />\n                <div>\n                  <p className=\"font-medium text-gray-900\" data-testid={`stock-item-name-${index}`}>\n                    {item.name}\n                  </p>\n                  <p className={`text-sm font-medium ${getStockColor(item.currentStock, item.minStockLevel)}`} data-testid={`stock-item-level-${index}`}>\n                    {item.stock}\n                  </p>\n                </div>\n              </div>\n              <Button\n                size=\"sm\"\n                className={`text-white ${getButtonStyle(item.currentStock, item.minStockLevel)}`}\n                onClick={() => onReorderItem(item.id)}\n                data-testid={`button-reorder-${index}`}\n              >\n                Đặt hàng\n              </Button>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4600},"client/src/components/dashboard/metrics-cards.tsx":{"content":"import { TrendingUp, ShoppingCart, Users, AlertTriangle } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport type { DashboardMetrics } from \"@/lib/types\";\n\ninterface MetricsCardsProps {\n  metrics: DashboardMetrics | null;\n}\n\nexport function MetricsCards({ metrics }: MetricsCardsProps) {\n  if (!metrics) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardContent className=\"p-6\">\n              <div className=\"h-20 bg-gray-200 rounded\"></div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const cards = [\n    {\n      title: \"Doanh thu hôm nay\",\n      value: metrics.todayRevenue,\n      change: metrics.todayGrowth,\n      changeType: \"increase\" as const,\n      icon: TrendingUp,\n      iconBg: \"bg-blue-100\",\n      iconColor: \"text-primary\",\n      testId: \"metric-revenue\"\n    },\n    {\n      title: \"Đơn hàng\",\n      value: metrics.ordersCount.toString(),\n      change: metrics.ordersGrowth,\n      changeType: \"increase\" as const,\n      icon: ShoppingCart,\n      iconBg: \"bg-green-100\",\n      iconColor: \"text-success\",\n      testId: \"metric-orders\"\n    },\n    {\n      title: \"Khách hàng mới\",\n      value: metrics.newCustomers.toString(),\n      change: metrics.customersGrowth,\n      changeType: \"increase\" as const,\n      icon: Users,\n      iconBg: \"bg-purple-100\",\n      iconColor: \"text-purple-600\",\n      testId: \"metric-customers\"\n    },\n    {\n      title: \"Sản phẩm sắp hết\",\n      value: metrics.lowStockItems.toString(),\n      change: \"Cần bổ sung\",\n      changeType: \"warning\" as const,\n      icon: AlertTriangle,\n      iconBg: \"bg-orange-100\",\n      iconColor: \"text-warning\",\n      testId: \"metric-stock\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      {cards.map((card) => {\n        const Icon = card.icon;\n        \n        return (\n          <Card key={card.title} className=\"shadow-sm border border-gray-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">{card.title}</p>\n                  <p className=\"text-3xl font-bold text-gray-900 mt-2\" data-testid={`${card.testId}-value`}>\n                    {card.value}\n                  </p>\n                  <div className=\"flex items-center mt-2\">\n                    {card.changeType === \"increase\" && (\n                      <TrendingUp className=\"h-4 w-4 text-success mr-1\" />\n                    )}\n                    {card.changeType === \"warning\" && (\n                      <AlertTriangle className=\"h-4 w-4 text-warning mr-1\" />\n                    )}\n                    <span \n                      className={`text-sm font-medium ${\n                        card.changeType === \"increase\" ? \"text-success\" : \"text-warning\"\n                      }`}\n                      data-testid={`${card.testId}-change`}\n                    >\n                      {card.change}\n                    </span>\n                    {card.changeType === \"increase\" && (\n                      <span className=\"text-sm text-gray-500 ml-1\">so với hôm qua</span>\n                    )}\n                  </div>\n                </div>\n                <div className={`w-12 h-12 ${card.iconBg} rounded-lg flex items-center justify-center`}>\n                  <Icon className={`${card.iconColor} text-xl`} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":3745},"client/src/components/dashboard/recent-orders.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport type { RecentOrder } from \"@/lib/types\";\n\ninterface RecentOrdersProps {\n  orders: RecentOrder[] | null;\n  onViewAll: () => void;\n}\n\nexport function RecentOrders({ orders, onViewAll }: RecentOrdersProps) {\n  if (!orders) {\n    return (\n      <Card className=\"shadow-sm border border-gray-200\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Đơn hàng gần đây</h3>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onViewAll}>\n              Xem tất cả\n            </Button>\n          </div>\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg animate-pulse\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-gray-200 rounded-lg\"></div>\n                  <div>\n                    <div className=\"h-4 bg-gray-200 rounded w-24 mb-1\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-16\"></div>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"h-4 bg-gray-200 rounded w-20 mb-1\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-16\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'completed':\n      case 'hoàn thành':\n        return 'text-success';\n      case 'processing':\n      case 'đang xử lý':\n        return 'text-warning';\n      case 'pending':\n      case 'chờ xử lý':\n        return 'text-blue-600';\n      default:\n        return 'text-gray-600';\n    }\n  };\n\n  return (\n    <Card className=\"shadow-sm border border-gray-200\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900\" data-testid=\"recent-orders-title\">\n            Đơn hàng gần đây\n          </h3>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={onViewAll}\n            className=\"text-primary hover:underline\"\n            data-testid=\"button-view-all-orders\"\n          >\n            Xem tất cả\n          </Button>\n        </div>\n        <div className=\"space-y-4\">\n          {orders.map((order, index) => (\n            <div \n              key={order.id} \n              className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\"\n              data-testid={`recent-order-${index}`}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center text-white font-semibold\">\n                  #{order.orderNumber}\n                </div>\n                <div>\n                  <p className=\"font-medium text-gray-900\" data-testid={`order-customer-${index}`}>\n                    {order.customer}\n                  </p>\n                  <p className=\"text-sm text-gray-500\" data-testid={`order-time-${index}`}>\n                    {order.time}\n                  </p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"font-semibold text-gray-900\" data-testid={`order-total-${index}`}>\n                  {order.total}\n                </p>\n                <p className={`text-sm ${getStatusColor(order.status)}`} data-testid={`order-status-${index}`}>\n                  {order.status}\n                </p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3967},"client/src/components/dashboard/revenue-chart.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { BarChart3 } from \"lucide-react\";\nimport type { RevenueChartData } from \"@/lib/types\";\n\ninterface RevenueChartProps {\n  data: RevenueChartData[] | null;\n}\n\nexport function RevenueChart({ data }: RevenueChartProps) {\n  const [period, setPeriod] = useState(\"7\");\n\n  return (\n    <Card className=\"lg:col-span-2 shadow-sm border border-gray-200\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900\" data-testid=\"revenue-chart-title\">\n            Doanh thu 7 ngày qua\n          </h3>\n          <Select value={period} onValueChange={setPeriod}>\n            <SelectTrigger className=\"w-40\" data-testid=\"select-period\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"7\">7 ngày qua</SelectItem>\n              <SelectItem value=\"30\">30 ngày qua</SelectItem>\n              <SelectItem value=\"90\">3 tháng qua</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        \n        <div className=\"h-64 bg-gray-50 rounded-lg flex items-center justify-center border-2 border-dashed border-gray-300\" data-testid=\"revenue-chart-placeholder\">\n          <div className=\"text-center\">\n            <BarChart3 className=\"h-12 w-12 text-gray-400 mx-auto mb-2\" />\n            <p className=\"text-gray-500 font-medium\">Biểu đồ doanh thu real-time</p>\n            <p className=\"text-sm text-gray-400\">Chart.js integration required</p>\n            {data && (\n              <p className=\"text-xs text-gray-400 mt-2\">\n                {data.length} data points available\n              </p>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1966},"client/src/components/dashboard/top-products.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport type { TopProduct } from \"@/lib/types\";\n\ninterface TopProductsProps {\n  products: TopProduct[] | null;\n}\n\nexport function TopProducts({ products }: TopProductsProps) {\n  if (!products) {\n    return (\n      <Card className=\"shadow-sm border border-gray-200\">\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-6\">Sản phẩm bán chạy</h3>\n          <div className=\"space-y-4\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"flex items-center justify-between animate-pulse\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-gray-200 rounded-lg\"></div>\n                  <div>\n                    <div className=\"h-4 bg-gray-200 rounded w-24 mb-1\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-16\"></div>\n                  </div>\n                </div>\n                <div className=\"h-4 bg-gray-200 rounded w-20\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"shadow-sm border border-gray-200\">\n      <CardContent className=\"p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-6\" data-testid=\"top-products-title\">\n          Sản phẩm bán chạy\n        </h3>\n        <div className=\"space-y-4\">\n          {products.map((product, index) => (\n            <div key={product.id} className=\"flex items-center justify-between\" data-testid={`top-product-${index}`}>\n              <div className=\"flex items-center space-x-3\">\n                <img \n                  src={product.image || \"https://images.unsplash.com/photo-1559056199-641a0ac8b55e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=60&h=60\"} \n                  alt={product.name}\n                  className=\"w-10 h-10 rounded-lg object-cover\"\n                  data-testid={`product-image-${index}`}\n                />\n                <div>\n                  <p className=\"font-medium text-gray-900\" data-testid={`product-name-${index}`}>\n                    {product.name}\n                  </p>\n                  <p className=\"text-sm text-gray-500\" data-testid={`product-sold-${index}`}>\n                    Đã bán: {product.soldCount}\n                  </p>\n                </div>\n              </div>\n              <p className=\"font-semibold text-gray-900\" data-testid={`product-revenue-${index}`}>\n                {product.revenue}\n              </p>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2697},"client/src/components/layout/app-layout.tsx":{"content":"import { useState } from \"react\";\nimport { Sidebar } from \"./sidebar\";\nimport { Header } from \"./header\";\nimport { NotificationModal } from \"@/components/ui/notification-modal\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\n\ninterface AppLayoutProps {\n  children: React.ReactNode;\n  title: string;\n}\n\nexport function AppLayout({ children, title }: AppLayoutProps) {\n  const [showNotifications, setShowNotifications] = useState(false);\n  const { isConnected } = useWebSocket();\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n      \n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title={title}\n          onToggleNotifications={() => setShowNotifications(!showNotifications)}\n          isWebSocketConnected={isConnected}\n        />\n        \n        <div className=\"flex-1 overflow-auto p-6\">\n          {children}\n        </div>\n      </main>\n\n      <NotificationModal \n        show={showNotifications}\n        onClose={() => setShowNotifications(false)}\n      />\n    </div>\n  );\n}\n","size_bytes":1058},"client/src/components/layout/header.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Search, Bell, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\n\ninterface HeaderProps {\n  title: string;\n  onToggleNotifications: () => void;\n  isWebSocketConnected: boolean;\n}\n\nexport function Header({ title, onToggleNotifications, isWebSocketConnected }: HeaderProps) {\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-gray-200 p-6\" data-testid=\"header\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <h2 className=\"text-2xl font-bold text-gray-900\" data-testid=\"page-title\">\n            {title}\n          </h2>\n          <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n            <span data-testid=\"current-date\">\n              {currentTime.toLocaleDateString('vi-VN')}\n            </span>\n            <span>•</span>\n            <span data-testid=\"current-time\">\n              {currentTime.toLocaleTimeString('vi-VN')}\n            </span>\n            {isWebSocketConnected && (\n              <>\n                <span>•</span>\n                <span className=\"text-green-600\" data-testid=\"ws-status\">\n                  ● Live\n                </span>\n              </>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Tìm kiếm sản phẩm, đơn hàng...\"\n              className=\"w-80 pl-10\"\n              data-testid=\"input-search\"\n            />\n            <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n          </div>\n          \n          <button\n            className=\"relative p-2 text-gray-600 hover:bg-gray-100 rounded-lg\"\n            onClick={onToggleNotifications}\n            data-testid=\"button-notifications\"\n          >\n            <Bell className=\"h-5 w-5\" />\n            <span className=\"absolute -top-1 -right-1 bg-error text-white text-xs rounded-full w-5 h-5 flex items-center justify-center\">\n              3\n            </span>\n          </button>\n          \n          <Button className=\"bg-primary hover:bg-blue-700\" data-testid=\"button-quick-sale\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Bán hàng nhanh\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2686},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport {\n  LayoutDashboard,\n  ShoppingCart,\n  Package,\n  Users,\n  Warehouse,\n  BarChart3,\n  UserCheck,\n  Settings,\n  ScanBarcode,\n  LogOut\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst navigation = [\n  { name: 'Dashboard', href: '/', icon: LayoutDashboard },\n  { name: 'Bán hàng', href: '/sales', icon: ShoppingCart },\n  { name: 'Sản phẩm', href: '/products', icon: Package },\n  { name: 'Khách hàng', href: '/customers', icon: Users },\n  { name: 'Kho hàng', href: '/inventory', icon: Warehouse },\n  { name: 'Báo cáo', href: '/reports', icon: BarChart3 },\n  { name: 'Nhân viên', href: '/staff', icon: UserCheck },\n  { name: 'Cài đặt', href: '/settings', icon: Settings },\n];\n\nexport function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <aside className=\"w-64 bg-white shadow-lg border-r border-gray-200\" data-testid=\"sidebar\">\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <ScanBarcode className=\"text-white text-lg\" />\n          </div>\n          <div>\n            <h1 className=\"text-xl font-bold text-gray-900\">POS Pro</h1>\n            <p className=\"text-sm text-gray-500\">Cửa hàng ABC</p>\n          </div>\n        </div>\n      </div>\n      \n      <nav className=\"p-4 space-y-2\">\n        <div className=\"space-y-1\">\n          {navigation.map((item) => {\n            const isActive = location === item.href;\n            const Icon = item.icon;\n            \n            return (\n              <Link key={item.name} href={item.href}>\n                <div\n                  className={cn(\n                    \"flex items-center space-x-3 px-4 py-3 rounded-lg font-medium transition-colors cursor-pointer\",\n                    isActive\n                      ? \"text-primary bg-blue-50\"\n                      : \"text-gray-600 hover:bg-gray-50\"\n                  )}\n                  data-testid={`nav-${item.href.slice(1) || 'dashboard'}`}\n                >\n                  <Icon className=\"w-5 h-5\" />\n                  <span>{item.name}</span>\n                </div>\n              </Link>\n            );\n          })}\n        </div>\n      </nav>\n      \n      <div className=\"absolute bottom-0 w-64 p-4 border-t border-gray-200 bg-white\">\n        <div className=\"flex items-center space-x-3\">\n          <img \n            src=\"https://images.unsplash.com/photo-1573496359142-b8d87734a5a2?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=150&h=150\" \n            alt=\"User profile\" \n            className=\"w-10 h-10 rounded-full object-cover\"\n            data-testid=\"user-avatar\"\n          />\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium text-gray-900 truncate\" data-testid=\"user-name\">\n              Nguyễn Thu Hương\n            </p>\n            <p className=\"text-xs text-gray-500 truncate\" data-testid=\"user-role\">\n              Quản lý\n            </p>\n          </div>\n          <button \n            className=\"text-gray-400 hover:text-gray-600\"\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":3368},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/notification-modal.tsx":{"content":"import { X, Info, AlertTriangle, CheckCircle } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport type { NotificationItem } from \"@/lib/types\";\n\ninterface NotificationModalProps {\n  show: boolean;\n  onClose: () => void;\n}\n\n// Mock notifications for demo\nconst mockNotifications: NotificationItem[] = [\n  {\n    id: \"1\",\n    type: \"info\",\n    title: \"Đơn hàng mới\",\n    message: \"Khách hàng Nguyễn Văn A vừa đặt đơn hàng #156\",\n    time: \"2 phút trước\",\n    read: false\n  },\n  {\n    id: \"2\",\n    type: \"warning\",\n    title: \"Cảnh báo tồn kho\",\n    message: \"Hạt cà phê Espresso sắp hết hàng\",\n    time: \"15 phút trước\",\n    read: false\n  },\n  {\n    id: \"3\",\n    type: \"success\",\n    title: \"Thanh toán thành công\",\n    message: \"Đơn hàng #155 đã được thanh toán\",\n    time: \"30 phút trước\",\n    read: true\n  }\n];\n\nexport function NotificationModal({ show, onClose }: NotificationModalProps) {\n  if (!show) return null;\n\n  const getIcon = (type: NotificationItem['type']) => {\n    switch (type) {\n      case 'info':\n        return Info;\n      case 'warning':\n        return AlertTriangle;\n      case 'success':\n        return CheckCircle;\n      default:\n        return Info;\n    }\n  };\n\n  const getIconStyle = (type: NotificationItem['type']) => {\n    switch (type) {\n      case 'info':\n        return \"bg-primary text-white\";\n      case 'warning':\n        return \"bg-warning text-white\";\n      case 'success':\n        return \"bg-success text-white\";\n      default:\n        return \"bg-gray-500 text-white\";\n    }\n  };\n\n  const getBackgroundStyle = (type: NotificationItem['type']) => {\n    switch (type) {\n      case 'info':\n        return \"bg-blue-50\";\n      case 'warning':\n        return \"bg-orange-50\";\n      case 'success':\n        return \"bg-green-50\";\n      default:\n        return \"bg-gray-50\";\n    }\n  };\n\n  return (\n    <>\n      <div \n        className=\"fixed inset-0 bg-black bg-opacity-50 z-50\"\n        onClick={onClose}\n        data-testid=\"notification-overlay\"\n      />\n      <div className=\"fixed right-4 top-16 w-96 bg-white rounded-lg shadow-xl border border-gray-200 max-h-96 overflow-y-auto z-50\">\n        <div className=\"p-4 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"font-semibold text-gray-900\" data-testid=\"notification-title\">\n              Thông báo\n            </h3>\n            <Button\n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={onClose}\n              data-testid=\"button-close-notifications\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n        <div className=\"p-4 space-y-3\">\n          {mockNotifications.map((notification, index) => {\n            const Icon = getIcon(notification.type);\n            \n            return (\n              <div \n                key={notification.id} \n                className={`flex items-start space-x-3 p-3 rounded-lg ${getBackgroundStyle(notification.type)}`}\n                data-testid={`notification-${index}`}\n              >\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${getIconStyle(notification.type)}`}>\n                  <Icon className=\"h-4 w-4\" />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"font-medium text-gray-900\" data-testid={`notification-title-${index}`}>\n                    {notification.title}\n                  </p>\n                  <p className=\"text-sm text-gray-600\" data-testid={`notification-message-${index}`}>\n                    {notification.message}\n                  </p>\n                  <p className=\"text-xs text-gray-500 mt-1\" data-testid={`notification-time-${index}`}>\n                    {notification.time}\n                  </p>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":4060},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}